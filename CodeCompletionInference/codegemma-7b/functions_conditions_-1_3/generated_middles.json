[
    "isinstance(node, ast.Assign)",
    "inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            return [affine.transform(curve) for curve in curves]\n\ndef apply_affine_multi_inv(curves",
    "self.is_right",
    "repetitions < 1",
    "left_side",
    "scale.size == 1",
    "(neighbour, region2_id) in similarities",
    "neighbour == region2_id",
    "repetitions is None:\n            repetitions = 1\n        if repetitions < 1:\n            raise ValueError(\"repetitions must be >= 1\")\n        if angle < 0:\n            raise ValueError(\"angle must be >= 0\")\n        if angle > 2 * np.",
    "repetitions is None:\n            repetitions = 1\n        if repetitions < 1:\n            raise ValueError(\"repetitions must be >= 1\")\n        if repetitions == 1:\n            return self.rotate(angle, center, scale, shear, resample, order,\n                               ",
    "input_coordinate == \"polar\"",
    "len(examples) > 0",
    "not show_curves",
    "inplace",
    "number_of_segments is None and delta_angle is None",
    "repetitions is None:\n            repetitions = 1\n        if repetitions < 1:\n            raise ValueError(\"repetitions must be >= 1\")\n        if angle < 0:\n            raise ValueError(\"angle must be >= 0\")\n        if angle > 2 * np.",
    "not visited[j]",
    "angle is None",
    "scale.size == 2",
    "isinstance(node, ast.Assign)",
    "result is not None",
    "coordinate_type1 == 'polar'",
    "self.AdditiveTransforms",
    "image_sample.PersistentClipPaths is not None",
    "start_line == end_line:\n            return lines[start_line][start_idx:end_idx]\n        elif start_line == end_line - 1:\n            return lines[start_line][start_idx:] + lines[end_line][:end_idx]",
    "not call['function_name']",
    "isinstance(current, ast.Attribute)",
    "bounds is not None",
    "isinstance(node.func, ast.Attribute)",
    "polar",
    "key in total",
    "not TextUtils.is_empty(examples_split)",
    "repetitions > 1",
    "parentheses_balance < 0",
    "isinstance(node, ast.If):\n            condition = ast.get_source_segment(code, node.test)\n            start_line = node.test.lineno\n            start_col = node.test.col_offset\n            end_line = node.test.end_lineno",
    "len(middle) < min_right",
    "flip",
    "rho < rho_bounds[0]",
    "neighbour_id in regions",
    "polar",
    "self.syntax_valid",
    "curve is None",
    "leaf_type == \"sharp\"",
    "not middle",
    "isinstance(figure, Figure)",
    "clip_ar > 1",
    "repetitions is None and delta_angle is None",
    "isinstance(node.func, ast.Name)",
    "parentheses_balance > 0:\n            current_line -= 1\n            start_idx = len(lines[current_line]) - 1\n            while start_idx > 0 and lines[current_line][start_idx]!= ')'",
    "self.PlotType[i] < 0"
]