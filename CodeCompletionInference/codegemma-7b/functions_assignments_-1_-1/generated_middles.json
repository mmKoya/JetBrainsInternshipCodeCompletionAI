[
    "(CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 2]])), 1, inner_radius, width, \"cartesian\")",
    "np.vstack((gap1, arc, gap2))",
    "ImageSample(image_sliced, extent, path, outline_curves)",
    "[]",
    "source_code\n        self.function_names = []",
    "min(num_lines, end_line + (max_context_lines if max_context_lines >= 0 else num_lines - end_line - 1))",
    "CodeBlockExtractor()",
    "CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))",
    "bounds[1]",
    "ast.parse(code)",
    "np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)",
    "bounds[0]",
    "nltk.word_tokenize(expected)",
    "CurveTransforms.interpolate(control_nodes, 100, \"bezier\", False)",
    "min(num_lines, call['end_line'] + 1 + (max_context_lines if max_context_lines >= 0 else num_lines - call['end_line']))",
    "np.array(perm)",
    "CurveGenerator.generate_image(image, outline_curves, dpu)",
    "[]",
    "np.histogram(region[:, 2], range=(0.0, 1.0), bins=n_bins)",
    "1",
    "self.draw_curve(image, curve, dpu)",
    "[]",
    "2 * np.pi / repetitions",
    "width/2",
    "2*np.pi/repetitions",
    "node.value.test.end_lineno",
    "bertscore.score(generated, expected, lang=\"en\", model_type=\"bert-base-uncased\")",
    "np.abs(x_bounds[0] - x_bounds[1]) / subdivisions[0]",
    "nltk.word_tokenize(generated)",
    "affine.transform(curve)",
    "i",
    "[np.array(local_outline_curves)]",
    "cart2pol(curve[0, :], curve[1, :])",
    "np.array([])\n        for i in range(len(curves)):\n            if i == 0:\n                curve = curves[i]\n            else:\n                curve = np.concatenate((curve, curves[i]), axis=0)",
    "[]",
    "self.chrf_score(generated, expected)",
    "2 * np.pi / repetitions",
    "'\\n'.join(lines[start:start_line])",
    "[]",
    "{\n                '(': 1,\n                ')': -1,\n            }.get(char, 0)",
    "CurveGenerator.fill_curve(image, outline_curves, dpu)",
    "outer_curve",
    "spline(t_fine)",
    "np.array([[0.0, 0.0]])\n            periods1 = 1\n            radius1 = 0.5\n            width1 = 0.05\n            coordinate_type1 = \"cartesian\"",
    "x",
    "1",
    "np.array(result)",
    "values",
    "current.value",
    "[]\n        self.X_axis = None\n        self.Y_axis = None\n        self.Rho_axis = None\n        self.Theta_axis = None"
]