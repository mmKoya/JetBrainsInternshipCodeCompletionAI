[
    "one and delta_angle is None",
    "in_right",
    "node, ast.AugAssign)",
    "olation_type == \"linear\"",
    "ddle",
    "ate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n        else",
    "eTransforms) > 0",
    "node, ast.Assign)",
    "s None",
    "yntax",
    "split_idx] in middle[min_right:]",
    " > 2*np.pi",
    "(current, ast.Attribute)",
    "es_balance > 0:\n            current_line -= 1\n            start_idx = len(lines[current_line]) - 1\n            while start_idx > 0 and lines[current_line][start_idx",
    "ode.func, ast.Name)",
    "not in new_region['neighbors']",
    "xt_line or call['end_line'] + 1 > max_context_line",
    "PlotType[i] == \"black\"",
    "_paths",
    "rent, ast.Name)",
    "d not right_side",
    "r nums[i] == i + 1",
    "unc, ast.Attribute)",
    "unds!= bounds[0] or self.Y_bounds!= bounds[1] or self.Rho_bounds!= bounds[2]",
    " self.min_context_lines + self.middle_line_count",
    "s None and delta_angle is None",
    "ited[j]",
    "cter_length:\n            return None\n        start = max(0, start_line - (max_context_lines if max_context_lines >= 0 else start_line))\n        end = min(num_lines, end",
    " len(expected)",
    "']) == 0",
    "ure, Figure)",
    "m_lines - end_line < min_context_lines",
    "ngth > 1:\n            swaps += cycle_length - 1\n    return swaps\n\ndef get_swaps(perm1, perm2):\n    visited = [False] * len(perm1)\n    swaps =",
    "_id < neighbour_id",
    " == region2_id",
    ", ast.If)",
    "urve is not None:\n            curve = input_curve\n        else:\n            raise ValueError(\"No curve specified\")\n\n        if not isinstance(curve, np.ndarray):\n            raise ValueError(\"Curve must be a numpy array\")\n\n",
    "se:\n            angle = -angle\n        transforms = []\n        for i in range(repetitions):\n            transforms.append(\n                transforms3d.euler.euler_matrix(\n                    angle * i, 0, ",
    ".size == 2",
    "gments is None",
    "ngle is None:\n            delta_angle = 2 * np.pi / repetitions\n            angle = None\n        elif repetitions is None",
    " 0",
    "[i] == \"line\"",
    "type == \"bezier\"",
    "curve is None",
    "e2 == 'polar'",
    "_colors",
    "_side",
    "n total",
    "e_angle:\n            angle = -angle\n        scale = np.array(scale)\n        if scale.size == 1:\n            scale = np.array([scale, scale])\n        if scale.size == 2"
]