[
    "age_sliced, extent, path, outline_curves)",
    "se(code)",
    "get_scores(generated, expected)",
    ".shape[0]",
    "ve2[:, 0], curve2[:, 1])).T",
    " y1, y2)\n        x1 = x1 - extent[0]\n        x2 = x2 - extent[0]\n        y1 = y1 - extent[2]\n        y2 = y2 - extent[2]",
    "rve[:, 0])",
    "curve_to_polar(curve)",
    " x + y * y)",
    "_curves(image, curve, dpu)",
    "egmentExtractor.extract_condition_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)",
    "i / delta_angle)",
    ")",
    "_line][start_idx]",
    "onditions(block)\n        if not conditions:\n            return []",
    "curve2, curve1, np.array([[curve2[0, 0], curve2[0, 1]]]))]",
    " outer_radius, width, \"cartesian\")",
    "ape[1]",
    "call['start_line'] - 1])\n            middle = '\\n'.join(lines[call['start_line']:call['end_line']])",
    "rdinate(rho, theta)",
    "rator.edge_type1(half=half), 1, outer_radius, edge_width, \"cartesian\")",
    ".translate(new_x_bounds[0], new_y_bounds[0])",
    "deepcopy(base_curves)",
    "([[0.0, 0.0]])\n            periods1 = 1\n            radius1 = 0.0\n            width1 = 0.0\n            coordinate_type1 = \"cartesian\"",
    "curve2]\n        curve1 = np.vstack((inner_rho, np.flip(theta))).T",
    "ray(scale)",
    "et, global_rotation_offset, use_flip, flip_angle, reverse_rotation)",
    "lor",
    "curve1[:, 0], curve1[:, 1])).T\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta",
    " curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n\n    @staticmethod\n    def custom_ring_arc",
    ") - len(line.lstrip())",
    "+ ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])",
    "er(np.array([[-1, 0], [-1, 1], [0, 2]]))",
    "1).rotate(local_rotation_offset).translate(radius, 0).rotate(i * angle + global_rotation_offset).rotate(-flip_angle).scale(1, -1)",
    "om_curve(image, curve, dpu)",
    "r_to_cartesian(curve)",
    "rated)",
    "source_segment(code, node.value.test)",
    "nts.shape[1], 3), dtype=np.uint8)",
    "nt(min_left, len(middle) - min_right)",
    "gion2_id]\n    regions[new_id] = {\n      'mask': np.logical_or(region1_info['mask'], region2_info['mask']),\n        'neighbors': region1_info['neighbors'].union(region2_info['neighbors']),\n        'color_histogram':",
    "te(radius, 0).rotate(i * angle + global_rotation_offset)\n            else:\n                trans_data = Affine2D().rotate(-flip_angle).scale(1, -1).rotate(flip_angle + local_rotation_offset).translate(radius, 0).rotate",
    "ds[1] - (y_bounds[0])) * (rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]",
    "heta1)/n_periods",
    "rator.random_edge(grid_size, step_size, interpolation)",
    "arse(code)",
    "radius, width, \"cartesian\")",
    "itor()",
    "iamond]\n        for i in range(1, subdivisions[0]):\n            base_diamond = CurveGenerator.polyline([x_delta*i, x_delta*(i+1), x_delta*(i+1), x_delta*i, x_delta*i], [y",
    "p(image_sample, additive_transforms)"
]