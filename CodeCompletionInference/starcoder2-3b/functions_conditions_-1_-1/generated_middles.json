[
    "inplace",
    "isinstance(figure, Figure)",
    "input_coordinate == \"r_input\":\n            r_values = values\n            theta_values = np.array([function(r) for r in r_values])\n            curve = np.vstack((r_values, theta_values)).T\n        elif input_",
    "func_name",
    "delta_angle is None",
    "use_flip",
    "max_characters >= 0 and len(middle_text) > max_characters",
    "neighbour < region2_id",
    "reverse_rotation",
    "isinstance(node, ast.Assign)",
    "inner_curve == (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\")",
    "isinstance(node, ast.If)",
    "call['num_args'] > max_arguments",
    "neighbour_id not in regions:\n                continue\n            if (region_id, neighbour_id) not in similarities:\n                similarities[(region_id, neighbour_id)] = histogram_intersection(regions[region_id]['color_histogram'], regions[ne",
    "repetitions is None and delta_angle is None:\n            raise ValueError(\"Either repetitions or delta_angle must be specified\")\n        if repetitions is None and delta_angle is None",
    "split_idx + min_right >= len(middle)",
    "scale.size == 1",
    "self.AdditiveTransforms is None",
    "interpolation_type == \"bezier\"",
    "isinstance(node, ast.With)",
    "delta_angle is None",
    "self.PlotType[i] == 0",
    "scale.size == 2",
    "start_idx < 0:\n                current_line -= 1\n                start_idx = len(lines[current_line]) - 1\n        parentheses_balance = 1\n        while parentheses_balance:\n            char = lines[current_line][end_idx]",
    "cycle_length > 1",
    "input_coordinate == \"x_input\"",
    "num_lines < middle_line_count + min_context_lines + max_context_lines",
    "polar",
    "reverse_rotation",
    "isinstance(figure, Figure)",
    "isinstance(node.func, ast.Name)",
    "isinstance(node, ast.If)",
    "isinstance(current, ast.Attribute)",
    "clip_ar > image_ar",
    "isinstance(node.func, ast.Attribute)",
    "not visited[j]",
    "repetitions is None",
    "repetitions is None",
    "input_coordinate == \"y_input\"",
    "start_line < 0 or end_line >= num_lines:\n            return None\n        if start_line == end_line:\n            if start_idx > end_idx:\n                return None\n            if max_characters >= 0 and start_idx + max_",
    "half",
    "coordinate_type2 == \"polar\"",
    "use_flip",
    "isinstance(current, ast.Name)",
    "key not in total",
    "neighbour < region1_id",
    "result",
    "len(middle) < min_left + min_right",
    "x_bounds[0] == x_bounds[1]",
    "evaluate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n\n    def add_curves(self, curves, plot_type, bounds=None, evaluate_bounds=False):\n        for curve in curves:\n            self"
]