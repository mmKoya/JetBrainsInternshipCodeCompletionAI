[
    "(CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 2]])), 1, inner_radius, width, \"cartesian\")",
    "CurveTransforms.merge_curves([gap1, arc, gap2])",
    "ImageSample(image_sliced, extent, path, outline_curves)",
    "[]",
    "source_code",
    "min(num_lines, end_line + 1 + (max_context_lines if max_context_lines >= 0 else num_lines))",
    "CodeExtractor()",
    "CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))",
    "bounds[1]",
    "ast.parse(code)",
    "np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)",
    "bounds[0]",
    "nltk.word_tokenize(expected)",
    "CurveGenerator.bezier(control_nodes)",
    "min(num_lines, call['end_line'] + (max_context_lines if max_context_lines >= 0 else num_lines))",
    "perm.copy()",
    "ImageSlicer.sample_from_curve(image, curve, dpu)",
    "[]",
    "np.histogram(region[:, 2], range=(0.0, 1.0), bins=n_bins)",
    "1",
    "ImageSlicer.sample_from_curve(image, curve, dpu)",
    "[]",
    "delta_angle",
    "-(width+gap)/2",
    "None",
    "node.value.test.end_lineno",
    "bert_score([generated], [expected], lang='en', rescale_with_baseline=True)",
    "np.abs(x_bounds[0] - x_bounds[1]) / subdivisions[0]",
    "nltk.word_tokenize(generated)",
    "affine.transform(curve)",
    "i",
    "local_outline_curves",
    "CurveTransforms.cartesian_to_polar(curve[0, :], curve[1, :])",
    "np.vstack(curves)",
    "[]",
    "self.chrf_score(generated, expected)",
    "delta_angle",
    "'\\n'.join(lines[start:start_line] + [lines[start_line][:start_idx]])",
    "[]",
    "1 if char == ')' else -1 if char == '(' else 0",
    "ImageSlicer.sample_from_curve(image, curve, dpu)",
    "outer_curve",
    "spline(t_fine)",
    "np.array([[0, 0]])",
    "x",
    "1",
    "np.array(result)",
    "values",
    "current.value",
    "[]"
]