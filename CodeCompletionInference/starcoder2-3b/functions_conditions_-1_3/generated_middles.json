[
    "isinstance(node, ast.Assign)",
    "inplace",
    "half",
    "angle is None:\n            angle = 2 * np.pi / repetitions\n            repetitions = None\n        elif repetitions is None",
    "left_side",
    "scale.size == 1",
    "(region1_id, neighbour) in similarities:\n            del similarities[(region1_id, neighbour)]\n        else",
    "neighbour == region2_id:\n            continue\n        if (region1_id, neighbour) in similarities:\n            del similarities[(region1_id, neighbour)]\n        elif (neighbour, region1_id) in similarities",
    "angle < 0",
    "angle < 0",
    "curve.shape[0] == 1:\n            curve = np.array([[0.0, 0.0]])\n        if curve.shape[0] == 1",
    "len(examples) > 0",
    "not show_lines",
    "inplace",
    "number_of_segments is None and delta_angle is None:\n            raise ValueError(\"Either number_of_segments or delta_angle must be specified\")\n        if number_of_segments is not None and delta_angle is not None:\n            raise ValueError(\"Either number_of_segments or delta",
    "angle < 0",
    "not visited[j]",
    "angle is None:\n            angle = np.pi / repetitions\n\n        if repetitions < 1",
    "scale.size == repetitions",
    "isinstance(node, ast.Assign):\n            targets = node.targets\n            value = node.value\n        elif isinstance(node, ast.AnnAssign):\n            targets = [node.target]\n            value = node.value\n        elif isinstance(node, ast.Delete)",
    "result",
    "coordinate_type1 == 'polar'",
    "self.ShowAxes:\n            ax.plot(self.Axes[:, 0], self.Axes[:, 1], color=\"k\", solid_capstyle='round', zorder=z_order, transform=ax.transData, linewidth=outline_thickness)\n        if self.ShowAxesLabels",
    "not image_sample.PersistentClipPaths is None and not image_sample.PersistentTransforms is None",
    "start_line == end_line:\n            return lines[start_line][start_idx:end_idx]\n        if start_line < end_line:\n            return lines[start_line][start_idx:] + \"\\n\" + \"\\n\".join(\n                lines[start_line",
    "call['arguments'] and call['arguments'][0] in self.ignored_arguments:\n                continue\n            if call['arguments'] and call['arguments'][0] in self.ignored_arguments_regex:\n                continue\n            if call['arguments'] and call['arguments'][0] in self.ignored_",
    "isinstance(current, ast.Attribute)",
    "bounds is not None",
    "isinstance(node.func, ast.Attribute)",
    "polar:\n            x_values = np.array([np.cos(x) for x in values])\n            y_values = np.array([np.sin(x) for x in values])\n            curve = np.vstack((x_values, y_values)).T\n        else",
    "value is not None",
    "examples_split",
    "repetitions > 1",
    "parentheses_balance == 0:\n                function_call['end_line'] = current_line\n                function_call['end_idx'] = start_idx + 1\n                break\n            if start_idx == 0",
    "isinstance(node.test, ast.Compare):\n            for op, expr in zip(node.ops, node.comparators):\n                condition = ast.get_source_segment(code, expr)\n                start_line = expr.lineno\n                start_col = expr.col_offset\n               ",
    "len(prefix) + len(suffix) + len(middle) > max_length:\n                continue\n            if len(prefix) + len(suffix) + len(middle) < min_length",
    "flip:\n            width = -width\n        if half",
    "x_bounds[0] == x_bounds[1]",
    "neighbour_id in regions",
    "polar",
    "self.args.use_syntax",
    "curve.shape[1]!= samples",
    "leaf_type == \"sharp\":\n            leaf = CurveGenerator.bezier(np.array([[-1, 0], [-1, 1], [0, 1], [0, 2]]))\n        elif leaf_type == \"round\"",
    "not prefix and not middle and not suffix",
    "not isinstance(figure, Figure)",
    "clip_ar > 1:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        else",
    "repetitions is None and delta_angle is None:\n            raise ValueError(\"Either repetitions or delta_angle must be specified\")\n        if repetitions is not None and delta_angle is not None:\n            raise ValueError(\"Only one of repetitions or delta_angle can be specified\")\n        if repet",
    "isinstance(node.func, ast.Name)",
    "parentheses_balance > 0:\n            current_line -= 1\n            start_idx = len(lines[current_line]) - 1\n            while start_idx >= 0 and lines[current_line][start_idx] =='':\n                start_idx -= 1\n        return",
    "self.PlotType[i] == 0"
]