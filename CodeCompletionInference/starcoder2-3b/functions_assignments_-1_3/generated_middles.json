[
    "1\n        while parentheses_balance:\n            char = lines[current_line][end_idx]\n            parentheses_balance += 1 if char == '(' else -1 if char == ')' else 0\n            end_idx -= 1\n        return start_idx, end_idx\n\n    def _get_function_call_start_end_idx(self, lines, function_call):\n        start_idx =",
    "np.array(control_points)\n        nodes = np.asfortranarray(nodes)\n        nodes = np.asfortranarray(values)\n        return bezier_curve(nodes)\n",
    "[node.target]",
    "AffineTransform(rotation=angle)",
    "FindAssignmentsVisitor()",
    "2*np.pi*n_periods",
    "rho*np.cos(theta)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n\n    @staticmethod\n    def sinusoidal_offset(theta, amplitude, radius, period, theta1, theta2, period_offset=0):\n        \"\"\"\n        Creates a sinusoidal curve with a given amplitude, radius, period, and",
    "{}\n    for region_id, region in regions.items():\n        similarities[region_id] = {}\n        for neighbour_id in region['neighbors']:\n            if region_id < neighbour_id:\n                similarities[region_id][neighbour_id] = 1 - spatial.distance.cosine(region['vector'], regions[neighbour_id]['vector'])\n    return similarities\n",
    "slice_image(image, dpu, segments, inner_radius, outer_radius, width, sample_rotation, global_rotation)",
    "1\n",
    "2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        return angle\n\n    def get_angle_for_number_of_segments(self, number_of_segments, reverse_rotation=False):\n        repetitions = np.maximum(1, number_of_segments)",
    "np.min(curve[:, 1])",
    "CurveTransforms.tight_map_polar_to_cartesian(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))",
    "[]\n        for i in range(subdivisions[0]):\n            for j in range(subdivisions[1]):\n                diamonds.append(base_diamond)",
    "len(lines)\n        if max_context_lines > 0:\n            num_lines = min(num_lines, max_context_lines)\n        if max_characters > 0:\n            num_lines = min(num_lines, max_characters // 80)\n        if num_lines < min_context_lines:\n            return '', '', ''\n        if num_lines > max_",
    "True",
    "ImageSampleTransformer.slice_image(image, dpu, segments, teeth_per_segment, aligned, teeth_width, inner_radius, outer_radius)",
    "np.array([inner_radius + ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])",
    "self.chrf_score(generated, expected)",
    "np.linspace(0, 2 * np.pi, repetitions)",
    "node.end_lineno",
    "[]\n            current = node.func\n            while isinstance(current, ast.Attribute):\n                parts.insert(0, current.attr)\n            func_name = '.'.join(parts)\n        else:\n            raise NotImplementedError(node.func)\n\n        return func_name\n\n    def get_func_name(self, node):\n        if isinstance(node.func, ast.Name):\n            func_name = node",
    "match.group(0)",
    "[curve1, curve2]",
    "node.name + \":\\n\"\n        for child in node.body:\n            class_source += self.visit(child)",
    "CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        return curve, outline_curves\n\n    def sample_from_curve(image, curve, dpu):\n        \"\"\"\n        Sample from a curve on an image.\n        :param image:\n        :param curve:\n        :param dpu:\n        :return:\n        \"\"\"",
    "transforms.Compose([\n            transforms.RandomHorizontalFlip(p=0.5),\n            transforms.RandomVerticalFlip(p=0.5),\n            transforms.RandomRotation(degrees=mirror_angle),\n        ])\n        new_image = transform(image_sample.Image)\n        new_persistent_transforms = []\n        new_persistent_paths = []\n        for i in range(len(image_sample.",
    "similarity\n",
    "region_mask.copy()",
    "2 * np.pi / repetitions\n        if reverse_rotation:\n            angle = -angle\n        return angle\n\n    def _get_angle(self, repetitions, reverse_rotation):\n        \"\"\"\n        Get the angle of the rotation.\n\n        Parameters\n        ----------\n        repetitions : int\n            Number of repetitions.\n        reverse_rotation : bool\n            Whether to reverse the rotation.\n\n        Returns\n        -------\n        angle : float\n           ",
    "ImageSampleTransformer.slice_image(image, outer_curve, inner_curve,\n                                                                                      global_rotation=global_rotation, half=half, left_edge=left_edge, right_edge=right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_",
    "[]\n        for start_pos, end_pos in find_condition_sections(block, max_characters, min_context_lines, max_context_lines):\n            conditions.append((start_pos, end_pos))\n        return conditions\n\n\ndef extract_examples(block: str) -> List[Tuple[str, str]]:\n    \"\"\"Extract examples from a block.\"\"\"\n    examples = []\n    for",
    "figure",
    "ImageSampleTransformer.circular_placement_additive(image, radius, repetitions, None, leaf_rotation, 0, True, np.pi/2-leaf_rotation, True, False)",
    "radius * np.ones(n)",
    "CurveTransforms.map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))",
    "CurveTransforms.polar_to_cartesian(curve1)",
    "np.array([np.cos(nodes), np.sin(nodes)]).T",
    "[1.0, 0.0, 0.0]",
    "polar_curve[:, 0] * np.cos(polar_curve[:, 1])",
    "{value: i for i, value in enumerate(perm2)}\n  ",
    "1\n        elif number_of_segments is None:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n        elif delta_angle is None:\n            repetitions = np.trunc(2*np.pi/number_of_segments)\n        else:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n\n        if reverse_rotation:\n           ",
    "CurveGenerator.outline_curve(outline_curves, dpu)",
    "[curve1, curve2]",
    "np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])\n        transform = np.dot(transform, np.array([[1.0, 0.0], [0.0, 1.0]]))\n        transform = np.dot(transform, np.array([[1.0, 0.0],",
    "np.array(curve) * np.exp(1j * np.radians(angle))\n        else:\n            curve = np.array(curve)",
    "[line for line in lines if line.strip()]",
    "len(segments)",
    "interpolated_curve\n        else:",
    "np.vstack(nodes)"
]