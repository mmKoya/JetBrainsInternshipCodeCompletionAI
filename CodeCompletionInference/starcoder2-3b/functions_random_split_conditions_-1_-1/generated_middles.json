[
    "e'] < min_context_lines",
    "[0] == y_bounds[1]",
    " not line_width",
    "lotType[i] == \"line\"",
    "= 0",
    "tance(node.func, ast.Attribute)",
    "e_rotation",
    " ast.AugAssign)",
    "urrent, ast.Attribute)",
    "args']) > max_arguments:\n                continue\n            if call['start_line'] - 1 < min_context_lines or num_lines - call['end_line'] < min_context_lines:\n                continue\n            prefix, middle, suffix = TextUtils.extract_",
    "angle is None",
    "idx < 0:\n                current_line -= 1\n                start_idx = len(lines[current_line]) - 1\n        parentheses_balance = 1\n        while parentheses_balance:\n            char = lines[current_line][end_idx]\n            parentheses_balance",
    "de, ast.AnnAssign)",
    "_angle is None",
    "d right_side",
    "otation",
    "gure, Figure)",
    "size == 1",
    "is None",
    "of_segments is None and delta_angle is None:\n            raise ValueError(\"Either number_of_segments or delta_angle must be specified\")\n        if number_of_segments is None and delta_angle is not None:\n            number_of_segments = np.trunc(",
    "ses_balance > 0",
    "ype == \"bezier\"",
    "< region2_id",
    "ited[j]",
    "dditiveTransforms) == 0",
    "segments is None",
    "s is None",
    "olors",
    "_side",
    "type2 == \"polar\"",
    "== x_bounds[1]",
    "e == \"x_input\"",
    "ur < new_id",
    "_bounds is None",
    "e, ast.Assign)",
    "inate == \"r_input\":\n            r_values = values\n            theta_values = np.array([function(r) for r in r_values])\n            curve = np.vstack((r_values, theta_values)).T\n        elif input_coordinate == \"theta",
    "= \"sharp\"",
    "< len(middle_text) < max_characters",
    "s_split",
    "ength > 1",
    "_rotation",
    "_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n\n    def add_curves(self, curves, plot_type, bounds=None, evaluate_bounds=False):\n        for curve in curves:\n            self.add_",
    "ns is None",
    "angle is None",
    "node.func, ast.Name)",
    "n(expected)",
    "ation_type == \"linear\":\n            curve = CurveGenerator.linear(control_nodes)\n        elif interpolation_type == \"linear_random\"",
    "pe[i] == -1:\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder",
    "line_curves",
    "image_ar"
]