[
    "e'] < min_context_lines or call['end_line'] > num_lines - 1",
    "[0] == y_bounds[1]",
    " subdivisions[0] > 1 and subdivisions[1] > 1",
    "lotType[i] > 0",
    "= 0",
    "tance(node.func, ast.Attribute)",
    "e_rotation",
    " ast.AugAssign)",
    "urrent, ast.Attribute)",
    "args']) > max_arguments",
    "angle is None:\n            delta_angle = 2 * np.pi / repetitions\n            angle = None\n        elif repetitions is None and delta_angle is not None",
    "idx < 0",
    "de, ast.AnnAssign)",
    "_angle is None",
    "d right_side",
    "otation",
    "gure, Figure)",
    "size == 1",
    "is None",
    "of_segments is None and delta_angle is None",
    "ses_balance > 0",
    "ype == \"bezier\"",
    "< region2_id",
    "ited[j]",
    "dditionalCurves) > 0",
    "segments is None",
    "s is None",
    "olors",
    "_side",
    "type2 == \"polar\"",
    "== x_bounds[1]",
    "e == \"x_input\"",
    "ur < new_id",
    "_bounds is None",
    "e, ast.Assign)",
    "inate == \"both_input\"",
    "= \"sharp\"",
    "and len(middle_text) > max_characters",
    "s_split",
    "ength > 0",
    "_rotation",
    "_bounds",
    "ns is None",
    "angle is None:\n            repetitions = np.trunc(number_of_segments)\n            angle = None\n        else:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n            angle = delta_angle\n        if angle is None:\n            angle = 2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        scale = np.array(scale)\n        if scale.size == 1:\n            scales = scale*np.ones(repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == repetitions:\n            scales = scale\n        else:\n            scales = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.scale_curves(curves, scales",
    "node.func, ast.Name)",
    "n(expected)",
    "ation_type == \"linear\"",
    "pe[i] == 0",
    "line_curves is not None",
    "image_ar"
]