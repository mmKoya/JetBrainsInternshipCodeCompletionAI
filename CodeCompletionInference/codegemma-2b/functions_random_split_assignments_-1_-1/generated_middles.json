[
    "age_sliced, extent, path, outline_curves)",
    "se(code)",
    "get_scores(generated, expected)",
    ".shape[0]",
    "ve2[:, 0], curve2[:, 1])).T",
    " y1, y2)",
    "rve[:, 0])",
    "get_rho_theta_bounds(curve)",
    " x + y * y)",
    "_curve(image, curve, dpu, inner_radius, outer_radius)",
    "ectionExtractor.extract_code_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)",
    "i / delta_angle)",
    ", segments, inner_radius, outer_radius, sample_rotation)",
    "_line][start_idx]",
    "onditions(block)",
    "curve1, curve2))]",
    " outer_radius, width, \"cartesian\")",
    "ape[1]",
    "call['start_line'] - 1])",
    "rve(rho, theta)",
    "rator.edge_type1(half=half), 1, outer_radius, edge_width, \"cartesian\")",
    ".translate(new_x_bounds[0], new_y_bounds[0])",
    "deepcopy(base_curves)",
    "([[0.0, 0.0]])\n        elif isinstance(inner_curve, np.ndarray):\n            curve1 = inner_curve\n            if len(curve1.shape) == 1:\n                curve1 = np.vstack((curve1, curve1))\n            if curve1.shape[1] == 2:\n                curve1 = np.vstack((curve1, np.array([[curve1[0, 0], curve1[0, 1]]])))\n            if curve1.shape[1] == 3:\n                curve1 = np.vstack((curve1, np.array([[curve1[0, 0], curve1[0, 1]], [curve1[1, 0], curve1[1, 1]]])))\n            if curve1.shape[1] == 4:\n                curve1 = np.vstack((curve1, np.array",
    "curve2]",
    "ray(scale)",
    "et, global_rotation_offset, use_flip, flip_angle, reverse_rotation)",
    "lors[self.PersistentClipPaths[i].name]",
    "curve1[:, 0], curve1[:, 1])).T",
    " curve2]\n        if len(outline_curves) == 1:\n            curve = outline_curves[0]\n        else:\n            curve = np.vstack(outline_curves)",
    ") - len(line.lstrip())",
    "- ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])",
    "er(np.array([[0, 0], [0, 1], [1, 1], [1, 0]]))\n        elif leaf_type == \"smooth\":\n            leaf = CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 0]]))",
    "1).rotate(i * angle + global_rotation_offset).scale(1, -1).rotate(flip_angle)",
    "om_curve(image, curve, dpu)",
    "r_to_cartesian(curve)",
    "rated)",
    "source_segment(code, node.value.test)",
    "nts.shape[1], 3), dtype=np.uint8)",
    "nt(min_left, len(middle) - min_right)",
    "gion2_id]",
    "te(radius, 0).rotate(i * angle + global_rotation_offset)",
    "ds[1] - (y_bounds[0])) * (rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]",
    "heta1)/n_periods",
    "rator.random_edge(grid_size, step_size, interpolation)",
    "arse(code)",
    "radius, width, \"cartesian\")",
    "itor()",
    "iamond]\n        for i in range(1, subdivisions[0]):\n            diamonds.append(Transformer.rotate_curve(base_diamond, np.pi/2 * i))\n        for i in range(1, subdivisions[1]):\n            diamonds.append(Transformer.rotate_curve(base_diamond, np.pi/2 * i))",
    "p(image_sample)\n            image_sample.PersistentClipPaths = new_persistent_paths"
]