[
    "isinstance(node, ast.Assign)",
    "not inplace",
    "half > 0",
    "repetitions < 1",
    "left_side",
    "scale.size == 1",
    "neighbour in region1_info['neighbors']",
    "neighbour in region2_info['neighbors']",
    "angle < 0",
    "angle < 0",
    "curve.shape[1] == 2",
    "len(examples) > 0",
    "not is_line_plot",
    "inplace",
    "number_of_segments is None and delta_angle is None",
    "angle < 0",
    "j!= i",
    "repetitions < 1",
    "scale.size == 2",
    "isinstance(node, ast.Assign)",
    "result is not None",
    "coordinate_type1 == 'polar'",
    "self.Persistent",
    "image_sample.PersistentClipPaths is not None",
    "start_line == end_line:\n            return lines[start_line][start_idx:end_idx]\n        if start_line == end_line - 1",
    "call['function'] not in function_whitelist",
    "current.func is not None",
    "bounds is not None",
    "isinstance(node.func, ast.Attribute)",
    "polar:\n            x_values = np.array([np.cos(x) for x in values])\n            y_values = np.array([np.sin(x) for x in values])\n            curve = np.vstack((x_values, y_values)).T\n        else",
    "key in total",
    "len(examples_split) > 1",
    "repetitions == 1",
    "parentheses_balance == 0:\n                break\n        if parentheses_balance < 0:\n            current_line += 1\n            start_idx = len(lines[current_line]) - 1\n            parentheses_balance = 0\n        elif parentheses_balance > 0:\n            current_line -= 1\n            start_idx = len(lines[current_line]) - 1\n            parentheses_balance = 0\n        else:\n            if current_line == 0:\n                break\n            else",
    "isinstance(node.value.test, ast.BoolOp)",
    "len(prefix) < min_left or len(suffix) < min_right",
    "flip:\n            width = -width\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        return triangle1, triangle2\n\ndef edge_type2(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            width = -width\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        ",
    "rho < rho_bounds[0] or rho > rho_bounds[1]",
    "region_id < neighbour_id",
    "polar",
    "self.syntax_validity",
    "curve.shape[0]!= samples",
    "leaf_type == \"sharp\"",
    "not prefix or not middle or not suffix",
    "not isinstance(figure, Figure)",
    "clip_ar < 1",
    "repetitions is None and angle is None",
    "isinstance(node.func, ast.Name)",
    "parentheses_balance!= 0 and current_line < len(lines)",
    "self.PlotType[i] < 0"
]