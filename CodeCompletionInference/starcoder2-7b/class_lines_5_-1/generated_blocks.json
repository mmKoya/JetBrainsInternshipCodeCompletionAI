[
    "class Transformer:\n    @staticmethod\n    def rotate_curves(curves: \"list\", angle=0):\n        transform = Affine2D().rotate(angle)\n        for i in range(len(curves)):\n            curves[i] = transform.transform(curves[i])\n    @staticmethod\n    def rotate_figure(figure: \"Figure\", angle=0):\n        Transformer.rotate_curves(figure.Curves, angle)\n        figure.evaluate_bounds()\n        return figure\n    @staticmethod\n    def scale_curves(curves: \"list\", scale=1.0):\n        for i in range(len(curves)):\n            curves[i] = scale*curves[i]\n    @staticmethod\n    def scale_figure(figure: \"Figure\", scale=1.0):\n        Transformer.scale_curves(figure.Curves, scale)\n        figure.evaluate_bounds()\n    @staticmethod\n    def rotation_repeat_curves(curves: \"list\", number_of_segments=None, delta_angle=None, scale=1.0, reverse_rotation=False):\n        if number_of_segments is None and delta_angle is None:\n            raise ValueError(\"Either number_of_segments or delta_angle must be specified\")\n        elif delta_angle is None:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = None\n        else:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = delta_angle\n        if angle is None:\n            angle = 2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        scale = np.array(scale)\n        if scale.size == 1:\n            scales = scale*np.ones(repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == repetitions:\n            scales = scale\n        else:\n            scales = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.scale_curves(curves, scales[0])\n        for i in range(1, repetitions):\n            new_curves = copy.deepcopy(base_curves)\n            Transformer.rotate_curves(new_curves, i*angle)\n            Transformer.scale_curves(new_curves, scales[i])\n            curves.extend(new_curves)\n    @staticmethod\n    def rotation_repeat_figure(figure: \"Figure\", number_of_segments=None, delta_angle=None, scale=1.0):\n        Transformer.rotation_repeat_curves(figure.Curves)\n        figure.evaluate_bounds()\n    @staticmethod\n    def flip_horizontal(curves):\n        for i in range(len(curves)):\n            curves[i][0, :] = -curves[i][0, :]\n    @staticmethod\n    def flip_vertical(curves):\n        for i in range(len(curves)):\n            curves[i][1, :] = -curves[i][1, :]\n    @staticmethod\n    def translate_curves(curves: \"list\", x=0.0, y=0.0):\n        for i in range(len(curves)):\n            curves[i][0, :] += x\n            curves[i][1, :] += y\n    @staticmethod\n    def translation_repeat_curves(curves: \"list\", repetitions=(2, 2), step=(0.1, 0.1), scale=1.0):\n        x_repetitions = np.maximum(repetitions[0], 1)\n        y_repetitions = np.maximum(repetitions[1], 1)\n        base_curves = copy.deepcopy(curves)\n        for x in range(1, x_repetitions):\n            Transformer.translate_curves(base_curves, step[0], 0)\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n        base_curves = copy.deepcopy(curves)\n        for y in range(1, y_repetitions):\n            Transformer.translate_curves(base_curves, 0, step[1])\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n    @staticmethod\n    def merge_curves(curves: \"list\"):\n        curve = np.hstack(curves)\n        curves.clear()\n        curves.append(curve)\n    @staticmethod\n    def reverse_curve(curve):\n        curve[:] = np.flip(curve, 1)\n    @staticmethod\n    def reverse_curves(curves: \"list\"):\n        for i in range(len(curves)):\n            Transformer.reverse_curve(curves[i])\n    @staticmethod\n    def interpolate_curve(curve, samples=100, kind=\"cubic\"):\n        spline = interp1d(np.linspace(0, 1, curve.shape[1]), curve, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        curve.resize((2, samples), refcheck=False)\n        curve[:] = np.vstack((x_fine, y_fine))\n    def transform_figure(self, figure: \"Figure\"):\n        return",
    "class CurveGenerator:\n    @staticmethod\n    def bezier(control_points, values=np.linspace(0.0, 1.0, 100), polar=False):\n        nodes = control_points\n        if polar:\n            nodes = CurveTransforms.polar_to_cartesian(control_points)\n        nodes = np.asfortranarray(nodes)\n        bezier_curve = bezier.Curve(nodes.T, degree=nodes.shape[0] - 1)\n        return bezier_curve.evaluate_multi(values).T\n    @staticmethod\n    def math_function(function, values, input_coordinate=\"x_input\", polar=False):\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function(x) for x in x_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"y_input\":\n            y_values = values\n            x_values = np.array([function(y) for y in y_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"xy_input\":\n            result = []\n            for x in values:\n                for y in values:\n                    result.append([x, function(x, y)])\n            curve = np.array(result)\n        else:\n            print(\"Invalid input_coordinate, curve will default to 0,0\")\n            curve = np.array([[0.0, 0.0]])\n        if polar:\n            curve = CurveTransforms.polar_to_cartesian(curve)\n        return curve\n    @staticmethod\n    def regular_polygon(n, radius=1.0, offset=(0.0, 0.0)):\n        theta = np.linspace(0, 2 * np.pi, n + 1)\n        rho = radius * np.ones(n + 1)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def edge_type1(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        curve_nodes = np.array([[0.2*width, 0], [0.4*width, height], [0.6*width, height], [0.8*width, 0]])\n        curve = CurveGenerator.bezier(curve_nodes, np.linspace(0, 1 - 0.5 * half, 100))\n        if half:\n            return CurveTransforms.merge_curves([triangle1, curve])\n        return CurveTransforms.merge_curves([triangle1, curve, triangle2])\n    @staticmethod\n    def random_edge(grid_size=(1,1), grid_step=(0.1, 0.1), interpolation_type=\"bezier\"):\n        control_nodes = []\n        for i in range(grid_size[0] + 1):\n            control_nodes.append([i * grid_step[0], np.random.randint(0, grid_size[1] + 1) * grid_step[1]])\n        control_nodes = np.array(control_nodes)\n        if interpolation_type == \"bezier\":\n            curve = CurveGenerator.bezier(control_nodes)\n        elif interpolation_type == \"linear\":\n            curve = control_nodes\n        else:\n            curve = CurveTransforms.interpolate(control_nodes, 100, \"cubic\", False)\n        return curve\n    @staticmethod\n    def polyline(x_values, y_values):\n        return np.vstack((np.array(x_values), np.array(y_values))).T\n    @staticmethod\n    def circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi / 2, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        rho = np.ones(100) * radius\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def sine_wave_circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi/2, amplitude=0.1, n_periods=2, period_offset=0.25, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        period = (theta2 - theta1)/n_periods\n        freq = 2*np.pi/period\n        rho = radius + amplitude*np.sin((theta-theta1+period_offset*period)*freq)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def petal(n=100, width=0.1, height=0.2, flat_stop_height=0.1, half=True):\n        arc = CurveGenerator.circular_arc(n, width / 2, 0, np.pi, (0, flat_stop_height))\n        CurveTransforms.scale_single(arc, (1, 2 * (height - flat_stop_height) / width), (0, flat_stop_height))\n    @staticmethod\n    def leaf(values=np.linspace(0, 1, 100), width=0.1, height=0.2, half=False):\n        control_nodes = np.array([[0, 0], [0, 1], [-1, 1], [-1, 2], [0, 2], [0, 3]])\n        curve = CurveGenerator.bezier(control_nodes, values)\n        curve = CurveTransforms.fit_c2c(curve, (-width/2, 0, 0, height))\n        if not half:\n            curve = np.vstack((curve, np.flip(CurveTransforms.scale_single(curve, (-1, 1), inplace=False), 0)))\n        return curve\n    @staticmethod\n    def pit(n=100, width=0.8, gap=0.2, repetitions=1):\n        start = -(width+gap)/2\n        arc_start = -width/2\n        end = -start\n        arc_end = -arc_start\n        gap1 = np.linspace(start, arc_start, 10)\n        gap2 = np.linspace(arc_end, end, 10)\n        gap1 = np.vstack((gap1, np.zeros(10))).T\n        gap2 = np.vstack((gap2, np.zeros(10))).T\n        arc = CurveGenerator.circular_arc(n, width/2, 0, np.pi)\n        CurveTransforms.scale_single(arc, (-1, -1))\n        curve = CurveTransforms.merge_curves([gap1, arc, gap2])\n        curves = []\n        for i in range(repetitions):\n            curves.append(CurveTransforms.translate_single(curve, i*(width+gap), 0, False))\n        return CurveTransforms.merge_curves(curves)",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        spline = interp1d(np.linspace(0, 1, curve.shape[0]), curve.T, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        interpolated_curve = np.vstack((x_fine, y_fine)).T\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class FunctionCallVisitor(ast.NodeVisitor):\n    def __init__(self, source_code):\n        self.source_code = source_code\n        self.function_calls = []\n    def visit_Call(self, node):\n        func_name = None\n        if isinstance(node.func, ast.Name):\n            func_name = node.func.id\n        elif isinstance(node.func, ast.Attribute):\n            parts = []\n            current = node.func\n            while isinstance(current, ast.Attribute):\n                parts.insert(0, current.attr)\n                current = current.value\n            if isinstance(current, ast.Name):\n                parts.insert(0, current.id)\n            func_name = \".\".join(parts)\n        args = [ast.get_source_segment(self.source_code, arg) for arg in node.args]\n        if func_name:\n            self.function_calls.append({\n                \"func_name\": func_name,\n                \"args\": args,\n                \"start_line\": node.lineno,\n                \"start_col_offset\": node.col_offset,\n                \"end_line\": node.end_lineno,\n                \"end_col_offset\": node.end_col_offset\n            })\n        self.generic_visit(node)",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif left_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve2, curve1, np.array([[curve2[0, 0], curve2[0, 1]]])))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc_with_teeth(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                                      amplitude=0.1, theta1=0.0, theta2=np.pi/2, teeth_width=0.05):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def ring_arc_with_teeth(image, dpu=1000.0, teeth_width=0.05, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, aligned=False):\n        segments = int(np.ceil((theta2 - theta1) / (2 * teeth_width)))\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class CurveGenerator:\n    @staticmethod\n    def bezier(control_points, values=np.linspace(0.0, 1.0, 100), polar=False):\n        nodes = control_points\n        if polar:\n            nodes = CurveTransforms.polar_to_cartesian(control_points)\n        nodes = np.asfortranarray(nodes)\n        bezier_curve = bezier.Curve(nodes.T, degree=nodes.shape[0] - 1)\n        return bezier_curve.evaluate_multi(values).T\n    @staticmethod\n    def math_function(function, values, input_coordinate=\"x_input\", polar=False):\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function(x) for x in x_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"y_input\":\n            y_values = values\n            x_values = np.array([function(y) for y in y_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"parametric\":\n            result = [function(value) for value in values]\n            curve = np.array(result)\n        else:\n            print(\"Invalid input_coordinate, curve will default to 0,0\")\n            curve = np.array([[0.0, 0.0]])\n        if polar:\n            curve = CurveTransforms.polar_to_cartesian(curve)\n        return curve\n    @staticmethod\n    def regular_polygon(n, radius=1.0, offset=(0.0, 0.0)):\n        theta = np.linspace(0, 2 * np.pi, n + 1)\n        rho = radius * np.ones(n + 1)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def edge_type1(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        curve_nodes = np.array([[0.2*width, 0], [0.4*width, height], [0.6*width, height], [0.8*width, 0]])\n        curve = CurveGenerator.bezier(curve_nodes, np.linspace(0, 1 - 0.5 * half, 100))\n        if half:\n            curve = np.vstack((curve, np.flip(curve, 0)))\n        return CurveTransforms.merge_curves([triangle1, curve, triangle2])\n    @staticmethod\n    def edge_type2(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        curve_nodes = np.array([[0.2*width, 0], [0.4*width, height], [0.6*width, height], [0.8*width, 0]])\n        curve = CurveGenerator.bezier(curve_nodes, np.\n        for i in range(grid_size[0] + 1):\n            control_nodes.append([i * grid_step[0], np.random.randint(0, grid_size[1] + 1) * grid_step[1]])\n        control_nodes = np.array(control_nodes)\n        if interpolation_type == \"bezier\":\n            curve = CurveGenerator.bezier(control_nodes)\n        elif interpolation_type == \"linear\":\n            curve = control_nodes\n        else:\n            curve = CurveTransforms.interpolate(control_nodes, 100, \"cubic\", False)\n        return curve\n    @staticmethod\n    def polyline(x_values, y_values):\n        return np.vstack((np.array(x_values), np.array(y_values))).T\n    @staticmethod\n    def circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi / 2, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        rho = np.ones(100) * radius\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def sine_wave_circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi/2, amplitude=0.1, n_periods=2, period_offset=0.25, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        period = (theta2 - theta1)/n_periods\n        freq = 2*np.pi/period\n        rho = radius + amplitude*np.sin((theta-theta1+period_offset*period)*freq)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def petal(n=100, width=0.1, height=0.2, flat_stop_height=0.1, half=True):\n        arc = CurveGenerator.circular_arc(n, width / 2, 0, np.pi, (0, flat_stop_height))\n        CurveTransforms.scale_single(arc, (1, 2 * (height - flat_stop_height) / width), (0, flat_stop_height))\n    @staticmethod\n    def leaf(values=np.linspace(0, 1, 100), width=0.1, height=0.2, half=False):\n        control_nodes = np.array([[0, 0], [0, 1], [-1, 1], [-1, 2], [0, 2], [0, 3]])\n        curve = CurveGenerator.bezier(control_nodes, values)\n        curve = CurveTransforms.fit_c2c(curve, (-width/2, 0, 0, height))\n        if not half:\n            curve = np.vstack((curve, np.flip(CurveTransforms.scale_single(curve, (-1, 1), inplace=False), 0)))\n        return curve\n    @staticmethod\n    def pit(n=100, width=0.8, gap=0.2, repetitions=1):\n        start = -(width+gap)/2\n        arc_start = -width/2\n        end = -start\n        arc_end = -arc_start\n        gap1 = np.linspace(start, arc_start, 10)\n        gap2 = np.linspace(arc_end, end, 10)\n        gap1 = np.vstack((gap1, np.zeros(10))).T\n        gap2 = np.vstack((gap2, np.zeros(10))).T\n        arc = CurveGenerator.circular_arc(n, width/2, 0, np.pi)\n        CurveTransforms.scale_single(arc, (-1, -1))\n        curve = CurveTransforms.merge_curves([gap1, arc, gap2])\n        curves = []\n        for i in range(repetitions):\n            curves.append(CurveTransforms.translate_single(curve, i*(width+gap), 0, False))\n        return CurveTransforms.merge_curves(curves)",
    "class FunctionCallVisitor(ast.NodeVisitor):\n    def __init__(self, source_code):\n        self.source_code = source_code\n        self.function_calls = []\n    def visit_Call(self, node):\n        func_name = None\n        if isinstance(node.func, ast.Name):\n            func_name = node.func.id\n        elif isinstance(node.func, ast.Attribute):\n            parts = []\n            current = node.func\n            while isinstance(current, ast.Attribute):\n                parts.insert(0, current.attr)\n                current = current.value\n            if isinstance(current, ast.Name):\n                parts.insert(0, current.id)\n            func_name = \".\".join(parts)\n        args = []\n        for arg in node.args:\n            if isinstance(arg, ast.Name):\n                args.append(arg.id)\n            elif isinstance(arg, ast.Str):\n                args.append(arg.s)\n            elif isinstance(arg, ast.Num):\n                args.append(arg.n)\n            elif isinstance(arg, ast.Tuple):\n                args.append(tuple([self.visit(x) for x in arg.elts]))\n            elif isinstance(arg, ast.List):\n                args.append(list([self.visit(x) for x in arg.elts]))\n            elif isinstance(arg, ast.Dict):\n                args.append(dict([(self.visit(k), self.visit(v)) for k, v in zip(arg.keys, arg.values)]))\n            elif isinstance\n                \"function\": func_name,\n                \"arguments\": args,\n                \"start_line\": node.lineno,\n                \"end_line\": node.end_lineno,\n                \"col_offset\": node.col_offset,\n                \"end_col_offset\": node.end_col_offset\n            })\n        self.generic_visit(node)",
    "class CurveGenerator:\n    @staticmethod\n    def bezier(control_points, values=np.linspace(0.0, 1.0, 100), polar=False):\n        nodes = control_points\n        if polar:\n            nodes = CurveTransforms.polar_to_cartesian(control_points)\n        curve = np.array([np.interp(value, nodes[:, 0], nodes[:, 1]) for value in values])\n        else:\n            curve = np.array([np.interp(value, nodes[:, 0], nodes[:, 1]) for value in values])\n        return curve\n    @staticmethod\n    def function(function, values=np.linspace(0.0, 1.0, 100), input_coordinate=\"x_input\", polar=False):\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function(x) for x in x_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"y_input\":\n            y_values = values\n            x_values = np.array([function(y) for y in y_values])\n            curve = np.v\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function(x) for x in x_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"y_input\":\n            y_values = values\n            x_values = np.array([function(y) for y in y_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"parametric\":\n            result = [function(value) for value in values]\n            curve = np.array(result)\n        else:\n            print(\"Invalid input_coordinate, curve will default to 0,0\")\n            curve = np.array([[0.0, 0.0]])\n        if polar:\n            curve = CurveTransforms.polar_to_cartesian(curve)\n        return curve\n    @staticmethod\n    def regular_polygon(n, radius=1.0, offset=(0.0, 0.0)):\n        theta = np.linspace(0, 2 * np.pi, n + 1)\n        rho = radius * np.ones(n + 1)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def edge_type1(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        curve_nodes = np.array([[0.2*width, 0], [0.4*width, height], [0.6*width, height], [0.8*width, 0]])\n        curve = CurveGenerator.bezier(curve_nodes, np.linspace(0, 1 - 0.5 * half, 100))\n        if half:\n            return CurveTransforms.merge_curves([triangle1, curve])\n        return CurveTransforms.merge_curves([triangle1, curve, triangle2])\n    @staticmethod\n    def random_edge(grid_size=(1,1), grid_step=(0.1, 0.1), interpolation_type=\"bezier\"):\n        control_nodes = []\n        for i in range(grid_size[0] + 1):\n            control_nodes.append([i * grid_step[0], np.random.randint(0, grid_size[1] + 1) * grid_step[1]])\n        control_nodes = np.array(control_nodes)\n        if interpolation_type == \"bezier\":\n            curve = CurveGenerator.bezier(control_nodes)\n        elif interpolation_type == \"linear\":\n            curve = control_nodes\n        else:\n            curve = CurveTransforms.interpolate(control_nodes, 100, \"cubic\", False)\n        return curve\n    @staticmethod\n    def polyline(x_values, y_values):\n        return np.vstack((np.array(x_values), np.array(y_values))).T\n    @staticmethod\n    def circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi / 2, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        rho = np.ones(100) * radius\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def sine_wave_circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi/2, amplitude=0.1, n_periods=2, period_offset=0.25, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        period = (theta2 - theta1)/n_periods\n        freq = 2*np.pi/period\n        rho = radius + amplitude*np.sin((theta-theta1+period_offset*period)*freq)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def petal(n=100, width=0.1, height=0.2, flat_stop_height=0.1, half=True):\n        arc = CurveGenerator.circular_arc(n, width / 2, 0, np.pi, (0, flat_stop_height))\n        CurveTransforms.scale_single(arc, (1, 2 * (height - flat_stop_height) / width), (0, flat_stop_height))\n    @staticmethod\n    def leaf(values=np.linspace(0, 1, 100), width=0.1, height=0.2, half=False):\n        control_nodes = np.array([[0, 0], [0, 1], [-1, 1], [-1, 2], [0, 2], [0, 3]])\n        curve = CurveGenerator.bezier(control_nodes, values)\n        curve = CurveTransforms.fit_c2c(curve, (-width/2, 0, 0, height))\n        if not half:\n            curve = np.vstack((curve, np.flip(CurveTransforms.scale_single(curve, (-1, 1), inplace=False), 0)))\n        return curve\n    @staticmethod\n    def pit(n=100, width=0.8, gap=0.2, repetitions=1):\n        start = -(width+gap)/2\n        arc_start = -width/2\n        end = -start\n        arc_end = -arc_start\n        gap1 = np.linspace(start, arc_start, 10)\n        gap2 = np.linspace(arc_end, end, 10)\n        gap1 = np.vstack((gap1, np.zeros(10))).T\n        gap2 = np.vstack((gap2, np.zeros(10))).T\n        arc = CurveGenerator.circular_arc(n, width/2, 0, np.pi)\n        CurveTransforms.scale_single(arc, (-1, -1))\n        curve = CurveTransforms.merge_curves([gap1, arc, gap2])\n        curves = []\n        for i in range(repetitions):\n            curves.append(CurveTransforms.translate_single(curve, i*(width+gap), 0, False))\n        return CurveTransforms.merge_curves(curves)",
    "class Transformer:\n    @staticmethod\n    def rotate_curves(curves: \"list\", angle=0):\n        transform = Affine2D().rotate(angle)\n        for i in range(len(curves)):\n            curves[i] = transform.transform(curves[i])\n    @staticmethod\n    def rotate_figure(figure: \"Figure\", angle=0):\n        Transformer.rotate_curves(figure.Curves, angle)\n        figure.evaluate_bounds()\n        return figure\n    @staticmethod\n    def scale_curves(curves: \"list\", scale=1.0):\n        for i in range(len(curves)):\n            curves[i] = scale*curves[i]\n    @staticmethod\n    def scale_figure(figure: \"Figure\", scale=1.0):\n        Transformer.scale_curves(figure.Curves, scale)\n        figure.evaluate_bounds()\n    @staticmethod\n    def rotation_repeat_curves(curves: \"list\", number_of_segments=None, delta_angle=None, scale=1.0, reverse_rotation=False):\n        if number_of_segments is None and delta_angle is None:\n            repetitions = 1\n            angle = None\n        elif number_of_segments is None:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n            angle = None\n        elif delta_angle is None:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = None\n        else:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = delta_angle\n        if angle is None:\n            angle = 2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        scale = np.array(scale)\n        if scale.size == 1:\n            scales = scale*np.ones(repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == repetitions:\n            scales = scale\n        else:\n            scales = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.scale_curves(curves, scales[0])\n        for i in range(1, repetitions):\n            new_curves = copy.deepcopy(base_curves)\n            Transformer.rotate_curves(new_curves, i*angle)\n            Transformer.scale_curves(new_curves, scales[i])\n            curves.extend(new_curves)\n    @staticmethod\n    def rotation_repeat_figure(figure: \"Figure\", number_of_segments=None, delta_angle=None, scale=1.0):\n        Transformer.rotation_repeat_curves(figure.Curves)\n        figure.evaluate_bounds()\n    @staticmethod\n    def flip_horizontal(curves):\n        for i in range(len(curves)):\n            curves[i][0, :] = -curves[i][0, :]\n    @staticmethod\n    def flip_vertical(curves):\n        for i in range(len(curves)):\n            curves[i][1, :] = -curves[i][1, :]\n    @staticmethod\n    def flip_figure(figure: \"Figure\", horizontal=True, vertical=True):\n        if horizontal:\n            Transformer.flip_horizontal(figure.Curves)\n        if vertical:\n            Transformer.flip_vertical(figure.Curves)\n        figure.evaluate_bounds()\n    @staticmethod\n    def translate_curves(curves: \"list\", x=0.0, y=0.0):\n        for i in range(len(curves)):\n            curves[i][0, :] += x\n            curves[i][1, :] += y\n    @staticmethod\n    def translation_repeat_curves(curves: \"list\", repetitions=(2, 2), step=(0.1, 0.1), scale=1.0):\n        x_repetitions = np.maximum(repetitions[0], 1)\n        y_repetitions = np.maximum(repetitions[1], 1)\n        base_curves = copy.deepcopy(curves)\n        for x in range(1, x_repetitions):\n            Transformer.translate_curves(base_curves, step[0], 0)\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n        base_curves = copy.deepcopy(curves)\n        for y in range(1, y_repetitions):\n            Transformer.translate_curves(base_curves, 0, step[1])\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n    @staticmethod\n    def merge_curves(curves: \"list\"):\n        curve = np.hstack(curves)\n        curves.clear()\n        curves.append(curve)\n    @staticmethod\n    def reverse_curve(curve):\n        curve[:] = np.flip(curve, 1)\n    @staticmethod\n    def reverse_curves(curves: \"list\"):\n        for i in range(len(curves)):\n            Transformer.reverse_curve(curves[i])\n    @staticmethod\n    def interpolate_curve(curve, samples=100, kind=\"cubic\"):\n        spline = interp1d(np.linspace(0, 1, curve.shape[1]), curve, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        curve.resize((2, samples), refcheck=False)\n        curve[:] = np.vstack((x_fine, y_fine))\n    def transform_figure(self, figure: \"Figure\"):\n        return",
    "class FunctionCallVisitor(ast.NodeVisitor):\n    def __init__(self, source_code):\n        self.source_code = source_code\n        self.function_calls = []\n    def visit_Call(self, node):\n        func_name = None\n        if isinstance(node.func, ast.Name):\n            func_name = node.func.id\n        elif isinstance(node.func, ast.Attribute):\n            parts = []\n            current = node.func\n            while isinstance(current, ast.Attribute):\n                parts.insert(0, current.attr)\n                current = current.value\n            if isinstance(current, ast.Name):\n                parts.insert(0, current.id)\n            func_name = \".\".join(parts)\n        args = [ast.get_source_segment(self.source_code, arg) for arg in node.args]\n        if func_name:\n            self.function_calls.append({\n                \"func_name\": func_name,\n                \"args\": args,\n                \"lineno\": node.lineno,\n                \"col_offset\": node.col_offset,\n                \"end_col_offset\": node.end_col_offset\n            })\n        self.generic_visit(node)",
    "class DatasetBuilder:\n    @staticmethod\n    def extract_datasets(\n        code_blocks: List[str],\n        max_values: List[int],\n        max_context_lines: List[int],\n        dataset_type: str,\n        extract_method: Callable[[str, Any, Any], List[Tuple[str, str, str]]]\n    ) -> List[Tuple[str, List[Tuple[str, str, str]]]]:\n        datasets = []\n        for max_value in max_values:\n            for max_context in max_context_lines:\n                dataset_name = f'{dataset_type}_{max_value}_{max_context}'\n                examples = extract_method(code_blocks, max_value, max_context)\n                if examples:\n                    datasets.append((dataset_name, examples))\n                    random_split_name = f'random_split_{dataset_type}_{max_value}_{max_context}'\n                    examples_split = TextUtils.random_split_middle_examples(examples, min_left=5, min_right=5)\n                    if examples_split:\n                        datasets.append((random_split_name, examples_split))\n        return datasets\n    @staticmethod\n    def extract_assignments_datasets(code_blocks: List[str], max_characters: List[int], max_context_lines: List[int]) -> List[Tuple[str, List[Tuple[str, str, str]]]]:\n        return DatasetBuilder.extract_datasets(\n            code_blocks,\n            max_characters,\n            max_context_lines,\n            'assignments',\n            lambda block, max_c, max_pf: CodeSegmentExtractor.extract_assignment_sections(block, max_characters=max_c, max_context_lines=max_pf),\n        )\n    @staticmethod\n    def extract_arguments_datasets(code_blocks: List[str], max_arguments: List[int], max_context_lines: List[int]) -> List[Tuple[str, List[Tuple[str, str, str]]]]:\n        return DatasetBuilder.extract_datasets(\n            code_blocks,\n            max_arguments,\n            max_context_lines,\n            'arguments',\n            lambda block, max_args, max_pf: CodeSegmentExtractor.extract_function_arguments(block, max_arguments=max_args, max_context_lines=max_pf),\n        )\n    @staticmethod\n    def extract_lines_datasets(code_blocks: List[str], num_lines: List[int], max_context_lines: List[int]) -> List[Tuple[str, List[Tuple[str, str, str]]]]:\n        return DatasetBuilder.extract_datasets(\n            code_blocks,\n            num_lines,\n            max_context_lines,\n            'lines',\n            lambda block, num_l, max_pf: CodeSegmentExtractor.extract_lines(block, middle_line_count=num_l, max_context_lines=max_pf),\n        )\n    @staticmethod\n    def extract_conditions_datasets(code_blocks: List[str], max_characters: List[int], max_context_lines: List[int]) -> List[Tuple[str, List[Tuple[str, str, str]]]]:\n        return DatasetBuilder.extract_datasets(\n            code_blocks,\n            max_characters,\n            max_context_lines,\n            'conditions',\n            lambda block, max_c, max_pf: CodeSegmentExtractor.extract_condition_sections(block, max_characters=max_c, max_context_lines=max_pf),\n        )",
    "class Figure:\n    z_order = 0\n    def __init__(self):\n        self.Curves = []\n        self.PlotType = []\n        self.Images = []\n        self.X_bounds = None\n        self.Y_bounds = None\n        self.Rho_bounds = None\n        self.Theta_bounds = None\n    def evaluate_curve_bounds(self, curve):\n        x = curve[:, 0]\n        y = curve[:, 1]\n        rho = np.sqrt(x**2 + y**2)\n        theta = np.arctan2(y, x)\n        x_bounds = (np.min(x), np.max(x))\n        y_bounds = (np.min(y), np.max(y))\n        rho_bounds = (np.min(rho), np.max(rho))\n        theta_bounds = (np.min(theta), np.max(theta))\n        return x_bounds, y_bounds, rho_bounds, theta_bounds\n    def update_curve_bounds(self, bounds):\n        if self.X_bounds is None:\n            self.X_bounds = bounds[0]\n            self.Y_bounds = bounds[1]\n            self.Rho_bounds = bounds[2]\n            self.Theta_bounds = bounds[3]\n        else:\n            self.X_bounds = (np.minimum(self.X_bounds[0], bounds[0][0]),\n                             np.maximum(self.X_bounds[1], bounds[0][1]))\n            self.Y_bounds = (np.minimum(self.Y_bounds[0], bounds[1][0]),\n                             np.maximum(self.Y_bounds[1], bounds[1][1]))\n            self.Rho_bounds = (np.minimum(self.Rho_bounds[0], bounds[2][0]),\n                               np.maximum(self.Rho_bounds[1], bounds[2][1]))\n            self.Theta_bounds = (np.minimum(self.Theta_bounds[0], bounds[3][0]),\n                                 np.maximum(self.Theta_bounds[1], bounds[3][1]))\n    def evaluate_bounds(self):\n        for Curve in self.Curves:\n            bounds = self.evaluate_curve_bounds(Curve)\n            self.update_curve_bounds(bounds)\n    def add_curve(self, curve, plot_type, bounds=None, evaluate_bounds=False):\n        self.Curves.append(curve)\n        self.PlotType.append(plot_type)\n        if bounds:\n            self.update_curve_bounds(bounds)\n        elif evaluate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n    def add_image(self, image):\n        self.Images.append(image)\n    def append_figure(self, figure: \"Figure\"):\n        self.Curves.extend(figure.Curves)\n        self.PlotType.extend(figure.PlotType)\n        self.update_curve_bounds((figure.X_bounds, figure.Y_bounds, figure.Rho_bounds, figure.Theta_bounds))\n    def __iadd__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            self.append_figure(figure)\n        else:\n            raise TypeError(\"Operator += can only be used with instance of class Figure\")\n    def __add__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            new_figure = Figure()\n            new_figure += self\n            new_figure += figure\n        else:\n            raise TypeError(\"Operator + can only be used with instance of class Figure\")\n        return new_figure\n    def plot(self, ax, image_outline_width=1.0):\n        for image in self.Images:\n            image.plot(ax, self.z_order, image_outline_width)\n            Figure.z_order += 1\n        for i in range(len(self.Curves)):\n            if self.PlotType[i] == \"clear\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n            elif self.PlotType[i] == \"fill\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", zorder=self.z_order)\n            elif self.PlotType[i] > 0:\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n            elif self.PlotType[i] < 0:\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n        Figure.z_order += 1",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def fit_polar(curve, extent):\n        rho_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        theta_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve, rho_bounds, theta_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def fit_polar_tight(curve, extent):\n        rho_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        theta_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve, theta_bounds, rho_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def fit\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        spline = interp1d(np.linspace(0, 1, curve.shape[0]), curve.T, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        interpolated_curve = np.vstack((x_fine, y_fine)).T\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class Figure:\n    z_order = 0\n    def __init__(self):\n        self.Curves = []\n        self.PlotType = []\n        self.Images = []\n        self.X_bounds = None\n        self.Y_bounds = None\n        self.Rho_bounds = None\n        self.Theta_bounds = None\n    @staticmethod\n    def evaluate_curve_bounds(curve):\n        x_bounds = (np.min(curve[0, :]), np.max(curve[0, :]))\n        y_bounds = (np.min(curve[1, :]), np.max(curve[1, :]))\n        (rho, theta) = CurveTransforms.cartesian_to_polar(curve[0, :], curve[1, :])\n        rho_bounds = (np.min(rho), np.max(rho))\n        theta_bounds = (np.min(theta), np.max(theta))\n        return x_bounds, y_bounds, rho_bounds, theta_bounds\n    def update_curve_bounds(self, bounds):\n        if self.X_bounds is None:\n            self.X_bounds = bounds[0]\n            self.Y_bounds = bounds[1]\n            self.Rho_bounds = bounds[2]\n            self.Theta_bounds = bounds[3]\n        else:\n            self.X_bounds = (np.minimum(self.X_bounds[0], bounds[0][0]),\n                             np.maximum(self.X_bounds[1], bounds[0][1]))\n            self.Y_bounds = (np.minimum(self.Y_bounds[0], bounds[1][0]),\n                             np.maximum(self.Y_bounds[1], bounds[1][1]))\n            self.Rho_bounds = (np.minimum(self.Rho_bounds[0], bounds[2][0]),\n                               np.maximum(self.Rho_bounds[1], bounds[2][1]))\n            self.Theta_bounds = (np.minimum(self.Theta_bounds[0], bounds[3][0]),\n                                 np.maximum(self.Theta_bounds[1], bounds[3][1]))\n    def evaluate_bounds(self):\n        for Curve in self.Curves:\n            bounds = self.evaluate_curve_bounds(Curve)\n            self.update_curve_bounds(bounds)\n    def add_curve(self, curve, plot_type, bounds=None, evaluate_bounds=False):\n        self.Curves.append(curve)\n        self.PlotType.append(plot_type)\n        if bounds:\n            self.update_curve_bounds(bounds)\n        elif evaluate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n    def add_image(self, image):\n        self.Images.append(image)\n    def append_figure(self, figure: \"Figure\"):\n        self.Curves.extend(figure.Curves)\n        self.PlotType.extend(figure.PlotType)\n        self.update_curve_bounds((figure.X_bounds, figure.Y_bounds, figure.Rho_bounds, figure.Theta_bounds))\n    def __iadd__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            self.append_figure(figure)\n        else:\n            raise TypeError(\"Operator += can only be used with instance of class Figure\")\n    def __add__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += self\n        new_figure += figure\n        return new_figure\n    def __radd__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += figure\n        new_figure += self\n        return new_figure\n    def __sub__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += self\n        new_figure -= figure\n        return new_figure\n    def __rsub__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += figure\n        new_figure -= self\n        return new_figure\n    def __isub__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            self.append_figure(figure)\n        else:\n            raise TypeError(\"Operator + can only be used with instance of class Figure\")\n        return new_figure\n    def plot(self, ax, image_outline_width=1.0):\n        for image in self.Images:\n            image.plot(ax, self.z_order, image_outline_width)\n            Figure.z_order += 1\n        for i in range(len(self.Curves)):\n            if self.PlotType[i] == \"clear\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n            elif self.PlotType[i] == \"fill\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", zorder=self.z_order)\n            elif self.PlotType[i] > 0:\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n            elif self.PlotType[i] < 0:\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n        Figure.z_order += 1",
    "class ImageSampleTransformer:\n    @staticmethod\n    def rotate_persistent(image_sample: ImageSample, angle=0.0):\n        transform = Affine2D().rotate(angle)\n        return\n    @staticmethod\n    def mirror_persistent(image_sample: ImageSample, mirror_angle=0.0):\n        transform = Affine2D().rotate(-mirror_angle).scale(1, -1).rotate(mirror_angle)\n        new_persistent_transforms = []\n        new_persistent_paths = []\n        for i in range(len(image_sample.PersistentTransforms)):\n            new_persistent_transforms.append(image_sample.PersistentTransforms[i] + transform)\n            new_persistent_paths.append(image_sample.PersistentClipPaths[i])\n        image_sample.PersistentClipPaths.extend(new_persistent_paths)\n        image_sample.PersistentTransforms.extend(new_persistent_transforms)\n    @staticmethod\n    def rotational_repeat_additive(image_sample: ImageSample, repetitions: int = None, delta_angle: float = None,\n                                    local_rotation_offset=0.0,\n                                    global_rotation_offset=0.0, use_flip=False, flip_angle=0.0, reverse_rotation=False, calculate_overlap=False):\n        additive_transforms = TransformsGenerator.circular_placement(radius, repetitions, delta_angle, local_rotation_offset,\n                                                                     global_rotation_offset, use_flip, flip_angle, reverse_rotation)\n        image_sample.AdditiveTransforms = additive_transforms\n        if calculate_overlap:\n            (new_persistent_paths, new_persistent_transforms, outline_curves) = paths_self_overlap(image_sample.PersistentClipPaths, image_sample.PersistentTransforms,\n                                                                                                   additive_transforms[0], additive_transforms[1])\n            image_sample.PersistentTransforms = new_persistent_transforms\n            image_sample.PersistentClipPaths = new_persistent_paths\n            image_sample.set_custom_outline_curves(outline_curves)",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        spline = interp1d(np.linspace(0, 1, curve.shape[0]), curve.T, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        interpolated_curve = np.vstack((x_fine, y_fine)).T\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        spline = interp1d(np.linspace(0, 1, curve.shape[0]), curve.T, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        interpolated_curve = np.vstack((x_fine, y_fine)).T\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        interpolated_curve = interpolate.interp1d(curve[:, 0], curve[:, 1], kind=kind, axis=0)(np.linspace(curve[0, 0], curve[-1, 0], samples))\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def sample_from_curve_with_outline(image, curve, dpu=1000.0, outline_curves=None):\n        if outline_curves is None:\n            outline_curves = [curve]\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, theta)).T\n        curve = np.vstack((curve1, curve2))\n        outline_curves = [curve1, curve2]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class ImageSampleGenerator:\n    \"\"\"Predefined methods for creating ImageSample. Uses ImageSlicer and GenerateTransforms to slice an image and transform it\"\"\"\n    @staticmethod\n    def ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0) -> ImageSample:\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.ring_arc(image, dpu, inner_radius, outer_radius, sample_rotation, sample_rotation + np.pi / segments)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2*segments, None, rotation_offset=-sample_rotation,\n                                                          use_flip=True, flip_angle=(2*sample_rotation+np.pi/segments)/2)\n        return image_sample\n    @staticmethod\n    def serrated_ring(image, dpu=1000.0, segments=8, teeth_per_segment=3, aligned=True, teeth_width=0.05, inner_radius=0.5,\n                      outer_radius=0.8, sample_rotation=0.0) -> ImageSample:\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.serrated_ring_arc(image, dpu, teeth_per_segment, aligned,\n                                                                                     teeth_width, inner_radius, outer_radius, sample_rotation, sample_rotation + np.pi / segments)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2*segments, None, rotation_offset=-sample_rotation,\n                                                          use_flip=True, flip_angle=(2*sample_rotation+np.pi/segments)/2)\n        return image_sample\n    @staticmethod\n    def sine_wave_ring(image, dpu=1000.0, segments=8, periods_per_segment=3, period_offset=0.25, inner_radius=0.5,\n                       outer_radius=0.8, amplitude=0.1, sample_rotation=0.0) -> ImageSample:\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.sine_wave_ring_arc(image, dpu, periods_per_segment,\n                                                                                      period_offset, inner_radius, outer_radius, amplitude, sample_rotation, sample_rotation + np.pi / segments)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None, rotation_offset=-sample_rotation, use_flip=True, flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def test_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, width=0.05, sample_rotation=0.0) -> ImageSample:\n        inner_curve = (CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 2]])), 1, inner_radius, width, \"cartesian\")\n        outer_curve = (CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 2]])), 1, outer_radius, width, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, True)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def pit_ring(image, dpu=1000.0, segments=8, pits_per_segment=1, inner_radius=0.5, outer_radius=0.8, width=0.8, depth=0.4, gap=0.2, sample_rotation=0.0,\n                   global_rotation=0.0, half=False, left_edge=False, right_edge=False) -> ImageSample:\n        outer_curve = (CurveGenerator.pit(100, width, gap, pits_per_segment), 1, outer_radius, depth, \"cartesian\")\n        inner_curve = (CurveTransforms.scale_single(CurveGenerator.pit(100, width, gap, pits_per_segment), (1, -1)), 1, inner_radius, depth, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def ring_type1(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, edge_width=0.05, sample_rotation=0.0,\n                   global_rotation=0.0, half=False, left_edge=False, right_edge=False) -> ImageSample:\n        inner_curve = (CurveGenerator.edge_type1(half=half), 1, inner_radius, edge_width, \"cartesian\")\n        outer_curve = (CurveGenerator.edge_type1(half=half), 1, outer_radius, edge_width, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def leaf_circle(image, dpu=1000.0, repetitions=50, radius=0.7, leaf_width=0.1, leaf_height=0.2, leaf_rotation=np.pi/6):\n        circle = CurveGenerator.regular_polygon(1000, radius)\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.leaf(image, dpu, leaf_width, leaf_height, False)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        image_sample.add_additional_curve(circle)\n        ImageSampleTransformer.circular_placement_additive(image_sample, radius, repetitions, None, leaf_rotation, 0, True, np.pi/2-leaf_rotation, True, False)\n        return image_sample\n    @staticmethod\n    def leaf_center(image, dpu=1000.0, segments=8, radius=0.4, height=0.2, sample_rotation=0.0, global_rotation=0.0, left_edge=True, right_edge=False, leaf_type=\"sharp\"):\n        if leaf_type == \"sharp\":\n            leaf = CurveGenerator.bezier(np.array([[-1, 0], [-1, 1], [0, 1], [0, 2]]))\n        else:\n            leaf = CurveGenerator.bezier(np.array([[-1, 0], [-1, 1], [0, 2]]))\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, None, (leaf, 1, radius, height, \"cartesian\"),\n                                                                                    sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def leaf_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, width=0.1, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.leaf(image, dpu, width, outer_radius-\n    @staticmethod\n    def random_edge_ring(image, dpu=1000.0, segments=8, grid_size=(5, 3), inner_radius=0.5, outer_radius=0.8, width=0.1,\n                         sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False, interpolation=\"spline\"):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.random_ring_arc(image, dpu, grid_size, (1, 1), inner_radius, outer_radius, width,\n                                                                                   sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge, interpolation)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def regular_polygon_ring(image, dpu=1000.0, segments=8, sides_per_segment=1, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.regular_polygon_ring_arc(image, dpu, sides_per_segment, inner_radius, outer_radius,\n                                                                                            sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation + global_rotation,\n                                                          use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def gear_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        return 12\n    @staticmethod\n    def claw_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        return 12\n    @staticmethod\n    def leaf_placement(image, dpu=1000.0, segments=8 , inner_radius=0.5, outer_radius=0.8, width=0.2, sample_rotation=0.0, global_rotation=0.0):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.leaf(image, dpu, width, outer_radius-inner_radius, True)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.mirror_persistent(image_sample, np.pi/2)\n        ImageSampleTransformer.circular_placement_additive(image_sample, inner_radius, segments, None, -np.pi/2, global_rotation)\n        return image_sample",
    "class Figure:\n    z_order = 0\n    def __init__(self):\n        self.Curves = []\n        self.PlotType = []\n        self.Images = []\n        self.X_bounds = None\n        self.Y_bounds = None\n        self.Rho_bounds = None\n        self.Theta_bounds = None\n    @staticmethod\n    def evaluate_curve_bounds(curve):\n        x_bounds = (np.min(curve[0, :]), np.max(curve[0, :]))\n        y_bounds = (np.min(curve[1, :]), np.max(curve[1, :]))\n        (rho, theta) = CurveTransforms.cartesian_to_polar(curve[0, :], curve[1, :])\n        rho_bounds = (np.min(rho), np.max(rho))\n        theta_bounds = (np.min(theta), np.max(theta))\n        return x_bounds, y_bounds, rho_bounds, theta_bounds\n    def update_curve_bounds(self, bounds):\n        if self.X_bounds is None:\n            self.X_bounds = bounds[0]\n            self.Y_bounds = bounds[1]\n            self.Rho_bounds = bounds[2]\n            self.Theta_bounds = bounds[3]\n        else:\n            self.X_bounds = (np.minimum(self.X_bounds[0], bounds[0][0]),\n                             np.maximum(self.X_bounds[1], bounds[0][1]))\n            self.Y_bounds = (np.minimum(self.Y_bounds[0], bounds[1][0]),\n                             np.maximum(self.Y_bounds[1], bounds[1][1]))\n            self.Rho_bounds = (np.minimum(self.Rho_bounds[0], bounds[2][0]),\n                               np.maximum(self.Rho_bounds[1], bounds[2][1]))\n            self.Theta_bounds = (np.minimum(self.Theta_bounds[0], bounds[3][0]),\n                                 np.maximum(self.Theta_bounds[1], bounds[3][1]))\n    def evaluate_bounds(self):\n        for Curve in self.Curves:\n            bounds = self.evaluate_curve_bounds(Curve)\n            self.update_curve_bounds(bounds)\n    def add_curve(self, curve, plot_type, bounds=None, evaluate_bounds=False):\n        self.Curves.append(curve)\n        self.PlotType.append(plot_type)\n        if bounds:\n            self.update_curve_bounds(bounds)\n        elif evaluate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n    def add_image(self, image):\n        self.Images.append(image)\n    def append_figure(self, figure: \"Figure\"):\n        self.Curves.extend(figure.Curves)\n        self.PlotType.extend(figure.PlotType)\n        self.update_curve_bounds((figure.X_bounds, figure.Y_bounds, figure.Rho_bounds, figure.Theta_bounds))\n    def __iadd__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            self.append_figure(figure)\n        else:\n            raise TypeError(\"Operator += can only be used with instance of class Figure\")\n    def __add__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            new_figure = Figure()\n            new_figure += self\n            new_figure += figure\n        else:\n            raise TypeError(\"Operator + can only be used with instance of class Figure\")\n        return new_figure\n    def plot(self, ax, image_outline_width=1.0):\n        for image in self.Images:\n            image.plot(ax, self.z_order, image_outline_width)\n            Figure.z_order += 1\n        for i in range(len(self.Curves)):\n            if self.PlotType[i] > 0:\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n            elif self.PlotType[i] < 0:\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n        Figure.z_order += 1",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        spline = interp1d(np.linspace(0, 1, curve.shape[0]), curve.T, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        interpolated_curve = np.vstack((x_fine, y_fine)).T\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class Figure:\n    z_order = 0\n    def __init__(self):\n        self.Curves = []\n        self.PlotType = []\n        self.Images = []\n        self.X_bounds = None\n        self.Y_bounds = None\n        self.Rho_bounds = None\n        self.Theta_bounds = None\n    @staticmethod\n    def evaluate_curve_bounds(curve):\n        x_bounds = (np.min(curve[0, :]), np.max(curve[0, :]))\n        y_bounds = (np.min(curve[1, :]), np.max(curve[1, :]))\n        (rho, theta) = CurveTransforms.cartesian_to_polar(curve[0, :], curve[1, :])\n        rho_bounds = (np.min(rho), np.max(rho))\n        theta_bounds = (np.min(theta), np.max(theta))\n        return x_bounds, y_bounds, rho_bounds, theta_bounds\n    def update_curve_bounds(self, bounds):\n        if self.X_bounds is None:\n            self.X_bounds = bounds[0]\n            self.Y_bounds = bounds[1]\n            self.Rho_bounds = bounds[2]\n            self.Theta_bounds = bounds[3]\n        else:\n            self.X_bounds = (np.minimum(self.X_bounds[0], bounds[0][0]),\n                             np.maximum(self.X_bounds[1], bounds[0][1]))\n            self.Y_bounds = (np.minimum(self.Y_bounds[0], bounds[1][0]),\n                             np.maximum(self.Y_bounds[1], bounds[1][1]))\n            self.Rho_bounds = (np.minimum(self.Rho_bounds[0], bounds[2][0]),\n                               np.maximum(self.Rho_bounds[1], bounds[2][1]))\n            self.Theta_bounds = (np.minimum(self.Theta_bounds[0], bounds[3][0]),\n                                 np.maximum(self.Theta_bounds[1], bounds[3][1]))\n    def evaluate_bounds(self):\n        for Curve in self.Curves:\n            bounds = self.evaluate_curve_bounds(Curve)\n            self.update_curve_bounds(bounds)\n    def add_curve(self, curve, plot_type, bounds=None, evaluate_bounds=False):\n        self.Curves.append(curve)\n        self.PlotType.append(plot_type)\n        if bounds:\n            self.update_curve_bounds(bounds)\n        elif evaluate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n    def add_image(self, image):\n        self.Images.append(image)\n    def append_figure(self, figure: \"Figure\"):\n        self.Curves.extend(figure.Curves)\n        self.PlotType.extend(figure.PlotType)\n        self.update_curve_bounds((figure.X_bounds, figure.Y_bounds, figure.Rho_bounds, figure.Theta_bounds))\n    def __iadd__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            self.append_figure(figure)\n        else:\n            raise TypeError(\"Operator += can only be used with instance of class Figure\")\n    def __add__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            new_figure = Figure()\n            new_figure += self\n            new_figure += figure\n        else:\n            raise TypeError(\"Operator + can only be used with instance of class Figure\")\n        return new_figure\n    def plot(self, ax, image_outline_width=1.0):\n        for image in self.Images:\n            image.plot(ax, self.z_order, image_outline_width)\n            Figure.z_order += 1\n        for i in range(len(self.Curves)):\n            if self.PlotType[i] == \"clear\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n            elif self.PlotType[i] == \"fill\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", zorder=self.z_order)\n            elif self.PlotType[i] > 0:\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n            elif self.PlotType[i] < 0:\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n        Figure.z_order += 1",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1, y1 = curve[0, :]\n        x2, y2 = curve[-1, :]\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class CodeExtractor(ast.NodeVisitor):\n    def __init__(self):\n        self.functions = []\n        self.classes = []\n    def visit_FunctionDef(self, node):\n        function_source = ast.get_source_segment(self.code, node)\n        self.functions.append(function_source)\n        self.generic_visit(node)\n    def visit_ClassDef(self, node):\n        class_source = ast.get_source_segment(self.code, node)\n        self.classes.append(class_source)\n        self.generic_visit(node)\n    def extract_from_code(self, code):\n        self.code = code\n        tree = ast.parse(self.code)\n        self.visit(tree)",
    "class Transformer:\n    @staticmethod\n    def rotate_curves(curves: \"list\", angle=0):\n        transform = Affine2D().rotate(angle)\n        for i in range(len(curves)):\n            curves[i] = transform.transform(curves[i])\n    @staticmethod\n    def rotate_figure(figure: \"Figure\", angle=0):\n        Transformer.rotate_curves(figure.Curves, angle)\n        figure.evaluate_bounds()\n        return figure\n    @staticmethod\n    def scale_curves(curves: \"list\", scale=1.0):\n        for i in range(len(curves)):\n            curves[i] = scale*curves[i]\n    @staticmethod\n    def scale_figure(figure: \"Figure\", scale=1.0):\n        Transformer.scale_curves(figure.Curves, scale)\n        figure.evaluate_bounds()\n    @staticmethod\n    def rotation_repeat_curves(curves: \"list\", number_of_segments=None, delta_angle=None, scale=1.0, reverse_rotation=False):\n        if number_of_segments is None and delta_angle is None:\n            repetitions = 1\n            angle = None\n        elif number_of_segments is None:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n            angle = None\n        elif delta_angle is None:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = None\n        else:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = delta_angle\n        if angle is None:\n            angle = 2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        if angle.size == 1:\n            angles = angle*np.ones(repetitions)\n        elif angle.size == 2:\n            angles = np.linspace(angle[0], angle[1], repetitions)\n        elif angle.size == repetitions:\n            angles = angle\n        else:\n            angles = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.rotate_curves(curves, angles[0])\n        for i in range(1, repetitions):\n            new_curves = copy.deepcopy(base_curves)\n            Transformer.rotate_curves(new_curves, i*angle)\n            curves.extend(new_curves)\n        if scale.size == 1:\n            scales = scale*np.ones(repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == repetitions:\n            scales = scale\n        else:\n            scales = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.scale_curves(curves, scales[0])\n        for i in range(1, repetitions):\n            new_curves = copy.deepcopy(base_curves)\n            Transformer.rotate_curves(new_curves, i*angle)\n            Transformer.scale_curves(new_curves, scales[i])\n            curves.extend(new_curves)\n    @staticmethod\n    def rotation_repeat_figure(figure: \"Figure\", number_of_segments=None, delta_angle=None, scale=1.0):\n        Transformer.rotation_repeat_curves(figure.Curves)\n        figure.evaluate_bounds()\n    @staticmethod\n    def flip_horizontal(curves):\n        for i in range(len(curves)):\n            curves[i][0, :] = -curves[i][0, :]\n    @staticmethod\n    def flip_vertical(curves):\n        for i in range(len(curves)):\n            curves[i][1, :] = -curves[i][1, :]\n    @staticmethod\n    def translate_curves(curves: \"list\", x=0.0, y=0.0):\n        for i in range(len(curves)):\n            curves[i][0, :] += x\n            curves[i][1, :] += y\n    @staticmethod\n    def translation_repeat_curves(curves: \"list\", repetitions=(2, 2), step=(0.1, 0.1), scale=1.0):\n        x_repetitions = np.maximum(repetitions[0], 1)\n        y_repetitions = np.maximum(repetitions[1], 1)\n        base_curves = copy.deepcopy(curves)\n        for x in range(1, x_repetitions):\n            Transformer.translate_curves(base_curves, step[0], 0)\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n        base_curves = copy.deepcopy(curves)\n        for y in range(1, y_repetitions):\n            Transformer.translate_curves(base_curves, 0, step[1])\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n    @staticmethod\n    def merge_curves(curves: \"list\"):\n        curve = np.hstack(curves)\n        curves.clear()\n        curves.append(curve)\n    @staticmethod\n    def reverse_curve(curve):\n        curve[:] = np.flip(curve, 1)\n    @staticmethod\n    def reverse_curves(curves: \"list\"):\n        for i in range(len(curves)):\n            Transformer.reverse_curve(curves[i])\n    @staticmethod\n    def interpolate_curve(curve, samples=100, kind=\"cubic\"):\n        spline = interp1d(np.linspace(0, 1, curve.shape[1]), curve, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        curve.resize((2, samples), refcheck=False)\n        curve[:] = np.vstack((x_fine, y_fine))\n    def transform_figure(self, figure: \"Figure\"):\n        return",
    "class Transformer:\n    @staticmethod\n    def rotate_curves(curves: \"list\", angle=0):\n        transform = Affine2D().rotate(angle)\n        for i in range(len(curves)):\n            curves[i] = transform.transform(curves[i])\n    @staticmethod\n    def rotate_figure(figure: \"Figure\", angle=0):\n        Transformer.rotate_curves(figure.Curves, angle)\n        figure.evaluate_bounds()\n        return figure\n    @staticmethod\n    def scale_curves(curves: \"list\", scale=1.0):\n        for i in range(len(curves)):\n            curves[i] = scale*curves[i]\n    @staticmethod\n    def scale_figure(figure: \"Figure\", scale=1.0):\n        Transformer.scale_curves(figure.Curves, scale)\n        figure.evaluate_bounds()\n    @staticmethod\n    def rotation_repeat_curves(curves: \"list\", number_of_segments=None, delta_angle=None, scale=1.0, reverse_rotation=False):\n        if number_of_segments is None and delta_angle is None:\n            repetitions = 1\n            angle = None\n        elif number_of_segments is None:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n            angle = None\n        elif delta_angle is None:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = None\n        else:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = delta_angle\n        if angle is None:\n            angle = 2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        scale = np.array(scale)\n        if scale.size == 1:\n            scales = scale*np.ones(repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == repetitions:\n            scales = scale\n        else:\n            scales = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.scale_curves(curves, scales[0])\n        for i in range(1, repetitions):\n            new_curves = copy.deepcopy(base_curves)\n            Transformer.rotate_curves(new_curves, i*angle)\n            Transformer.scale_curves(new_curves, scales[i])\n            curves.extend(new_curves)\n    @staticmethod\n    def rotation_repeat_figure(figure: \"Figure\", number_of_segments=None, delta_angle=None, scale=1.0):\n        Transformer.rotation_repeat_curves(figure.Curves)\n        figure.evaluate_bounds()\n    @staticmethod\n    def flip_horizontal(curves):\n        for i in range(len(curves)):\n            curves[i][0, :] = -curves[i][0, :]\n    @staticmethod\n    def flip_vertical(curves):\n        for i in range(len(curves)):\n            curves[i][1, :] = -curves[i][1, :]\n    @staticmethod\n    def translate_curves(curves: \"list\", x=0.0, y=0.0):\n        for i in range(len(curves)):\n            curves[i][0, :] += x\n            curves[i][1, :] += y\n    @staticmethod\n    def translation_repeat_curves(curves: \"list\", repetitions=(2, 2), step=(0.1, 0.1), scale=1.0):\n        x_repetitions = np.maximum(repetitions[0], 1)\n        y_repetitions = np.maximum(repetitions[1], 1)\n        base_curves = copy.deepcopy(curves)\n        for x in range(1, x_repetitions):\n            Transformer.translate_curves(base_curves, step[0], 0)\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n        base_curves = copy.deepcopy(curves)\n        for y in range(1, y_repetitions):\n            Transformer.translate_curves(base_curves, 0, step[1])\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n    @staticmethod\n    def merge_curves(curves: \"list\"):\n        for i in range(len(curves)):\n            curves[i] = np.hstack(curves[i])\n    @staticmethod\n    def reverse_curve(curve):\n        curve[:] = np.flip(curve, 1)\n    @staticmethod\n    def reverse_curves(curves: \"list\"):\n        for i in range(len(curves)):\n            Transformer.reverse_curve(curves[i])\n    @staticmethod\n    def interpolate_curve(curve, samples=100, kind=\"cubic\"):\n        spline = interp1d(np.linspace(0, 1, curve.shape[1]), curve, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        curve.resize((2, samples), refcheck=False)\n        curve[:] = np.vstack((x_fine, y_fine))\n    def transform_figure(self, figure: \"Figure\"):\n        return",
    "class ImageSampleTransformer:\n    @staticmethod\n    def rotate_persistent(image_sample: ImageSample, angle=0.0):\n        transform = Affine2D().rotate(angle)\n        return\n    @staticmethod\n    def mirror_persistent(image_sample: ImageSample, mirror_angle=0.0):\n        transform = Affine2D().rotate(-mirror_angle).scale(1, -1).rotate(mirror_angle)\n        new_persistent_transforms = []\n        new_persistent_paths = []\n        for i in range(len(image_sample.PersistentTransforms)):\n            new_persistent_transforms.append(image_sample.PersistentTransforms[i] + transform)\n            new_persistent_paths.append(image_sample.PersistentClipPaths[i])\n        image_sample.PersistentClipPaths.extend(new_persistent_paths)\n        image_sample.PersistentTransforms.extend(new_persistent_transforms)\n        return\n    @staticmethod\n    def additive_transforms(image_sample: ImageSample, additive_transforms: list):\n        image_sample.AdditiveTransforms = additive_transforms\n    @staticmethod\n    def circular_placement_additive(image_sample: ImageSample, radius=0.5, repetitions: int = None, delta_angle: float = None, local_rotation_offset=0.0,\n                                    global_rotation_offset=0.0, use_flip=False, flip_angle=0.0, reverse_rotation=False, calculate_overlap=False):\n        additive_transforms = TransformsGenerator.circular_placement(radius, repetitions, delta_angle, local_rotation_offset,\n                                                                     global_rotation_offset, use_flip, flip_angle, reverse_rotation)\n        image_sample.AdditiveTransforms = additive_transforms\n        if calculate_overlap:\n            (new_persistent_paths, new_persistent_transforms, outline_curves) = paths_self_overlap(image_sample.PersistentClipPaths, image_sample.PersistentTransforms,\n                                                                                                   additive_transforms[0], additive_transforms[1])\n            image_sample.PersistentTransforms = new_persistent_transforms\n            image_sample.PersistentClipPaths = new_persistent_paths\n            image_sample.set_custom_outline_curves(outline_curves)",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = CurveGenerator.circular_arc(100, outer_radius, theta1, theta2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def ring_arc_with_center(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6, center_radius=0.1, center_width=0.05):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = CurveGenerator.circular_arc\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class ImageSampleGenerator:\n    \"\"\"Predefined methods for creating ImageSample. Uses ImageSlicer and GenerateTransforms to slice an image and transform it\"\"\"\n    @staticmethod\n    def ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0) -> ImageSample:\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.ring_arc(image, dpu, inner_radius, outer_radius, sample_rotation, sample_rotation + np.pi / segments)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2*segments, None, rotation_offset=-sample_rotation,\n                                                          use_flip=True, flip_angle=(2*sample_rotation+np.pi/segments)/2)\n        return image_sample\n    @staticmethod\n    def serrated_ring(image, dpu=1000.0, segments=8, teeth_per_segment=3, aligned=True, teeth_width=0.05, inner_radius=0.5,\n                      outer_radius=0.8, sample_rotation=0.0) -> ImageSample:\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.serrated_ring_arc(image, dpu, teeth_per_segment, aligned,\n                                                                                     teeth_width, inner_radius, outer_radius, sample_rotation, sample_rotation + np.pi / segments)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2*segments, None, rotation_offset=-sample_rotation,\n                                                          use_flip=True, flip_angle=(2*sample_rotation+np.pi/segments)/2)\n        return image_sample\n    @staticmethod\n    def serrated_ring_type1(image, dpu=1000.0, segments=8, teeth_per_segment=3, aligned=True, teeth_width=0.05, inner_radius=0.5,\n                      outer_radius=0.8, sample_rotation=0.0) -> ImageSample:\n        inner_curve = (CurveGenerator.edge_type1(half=True), 1, inner_radius, teeth_width, \"cartesian\")\n        outer_curve = (CurveGenerator.edge_type1(half=True), 1, outer_radius, teeth_width, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None, rotation_offset=-sample_rotation, use_flip=True, flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def test_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, width=0.05, sample_rotation=0.0) -> ImageSample:\n        inner_curve = (CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 2]])), 1, inner_radius, width, \"cartesian\")\n        outer_curve = (CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [1, 2]])), 1, outer_radius, width, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, True)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def pit_ring(image, dpu=1000.0, segments=8, pits_per_segment=1, inner_radius=0.5, outer_radius=0.8, width=0.8, depth=0.4, gap=0.2, sample_rotation=0.0,\n                   global_rotation=0.0, half=False, left_edge=False, right_edge=False) -> ImageSample:\n        outer_curve = (CurveGenerator.pit(100, width, gap, pits_per_segment), 1, outer_radius, depth, \"cartesian\")\n        inner_curve = (CurveTransforms.scale_single(CurveGenerator.pit(100, width, gap, pits_per_segment), (1, -1)), 1, inner_radius, depth, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def ring_type1(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, edge_width=0.05, sample_rotation=0.0,\n                   global_rotation=0.0, half=False, left_edge=False, right_edge=False) -> ImageSample:\n        inner_curve = (CurveGenerator.edge_type1(half=half), 1, inner_radius, edge_width, \"cartesian\")\n        outer_curve = (CurveGenerator.edge_type1(half=half), 1, outer_radius, edge_width, \"cartesian\")\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def leaf_circle(image, dpu=1000.0, repetitions=50, radius=0.7, leaf_width=0.1, leaf_height=0.2, leaf_rotation=np.pi/6):\n        circle = CurveGenerator.regular_polygon(1000, radius)\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.leaf(image, dpu, leaf_width, leaf_height, False)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        image_sample.add_additional_curve(circle)\n        ImageSampleTransformer.circular_placement_additive(image_sample, radius, repetitions, None, leaf_rotation, 0, True, np.pi/2-leaf_rotation, True, False)\n        return image_sample\n    @staticmethod\n    def leaf_center(image, dpu=1000.0, segments=8, radius=0.4, height=0.2, sample_rotation=0.0, global_rotation=0.0, left_edge=True, right_edge=False, leaf_type=\"sharp\"):\n        if leaf_type == \"sharp\":\n            leaf = CurveGenerator.bezier(np.array([[-1, 0], [-1, 1], [0, 1], [0, 2]]))\n        else:\n            leaf = CurveGenerator.bezier(np.array([[-1, 0], [-1, 1], [0, 2]]))\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, None, (leaf, 1, radius, height, \"cartesian\"),\n                                                                                    sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation + global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def random_edge_ring(image, dpu=1000.0, segments=8, grid_size=(5, 3), inner_radius=0.5, outer_radius=0.8, width=0.1,\n                         sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False, interpolation=\"spline\"):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.random_ring_arc(image, dpu, grid_size, (1, 1), inner_radius, outer_radius, width,\n                                                                                   sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge, interpolation)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation+global_rotation, use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def regular_polygon_ring(image, dpu=1000.0, segments=8, sides_per_segment=1, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.regular_polygon_ring_arc(image, dpu, sides_per_segment, inner_radius, outer_radius,\n                                                                                            sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.rotational_repeat_additive(image_sample, 2 * segments, None,\n                                                          rotation_offset=-sample_rotation + global_rotation,\n                                                          use_flip=True,\n                                                          flip_angle=(2 * sample_rotation + np.pi / segments) / 2)\n        return image_sample\n    @staticmethod\n    def gear_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        return 12\n    @staticmethod\n    def claw_ring(image, dpu=1000.0, segments=8, inner_radius=0.5, outer_radius=0.8, sample_rotation=0.0, global_rotation=0.0, left_edge=False, right_edge=False):\n        return 12\n    @staticmethod\n    def leaf_placement(image, dpu=1000.0, segments=8 , inner_radius=0.5, outer_radius=0.8, width=0.2, sample_rotation=0.0, global_rotation=0.0):\n        (image_sliced, extent, path, outline_curves) = ImageSlicer.leaf(image, dpu, width, outer_radius-inner_radius, True)\n        image_sample = ImageSample(image_sliced, extent, path, outline_curves)\n        ImageSampleTransformer.mirror_persistent(image_sample, np.pi/2)\n        ImageSampleTransformer.circular_placement_additive(image_sample, inner_radius, segments, None, -np.pi/2, global_rotation)\n        return image_sample",
    "class Figure:\n    z_order = 0\n    def __init__(self):\n        self.Curves = []\n        self.PlotType = []\n        self.Images = []\n        self.X_bounds = None\n        self.Y_bounds = None\n        self.Rho_bounds = None\n        self.Theta_bounds = None\n    @staticmethod\n    def evaluate_curve_bounds(curve):\n        x_bounds = (np.min(curve[0, :]), np.max(curve[0, :]))\n        y_bounds = (np.min(curve[1, :]), np.max(curve[1, :]))\n        (rho, theta) = CurveTransforms.cartesian_to_polar(curve[0, :], curve[1, :])\n        rho_bounds = (np.min(rho), np.max(rho))\n        theta_bounds = (np.min(theta), np.max(theta))\n        return x_bounds, y_bounds, rho_bounds, theta_bounds\n    def update_curve_bounds(self, bounds):\n        if self.X_bounds is None:\n            self.X_bounds = bounds[0]\n            self.Y_bounds = bounds[1]\n            self.Rho_bounds = bounds[2]\n            self.Theta_bounds = bounds[3]\n        else:\n            self.X_bounds = (np.minimum(self.X_bounds[0], bounds[0][0]),\n                             np.maximum(self.X_bounds[1], bounds[0][1]))\n            self.Y_bounds = (np.minimum(self.Y_bounds[0], bounds[1][0]),\n                             np.maximum(self.Y_bounds[1], bounds[1][1]))\n            self.Rho_bounds = (np.minimum(self.Rho_bounds[0], bounds[2][0]),\n                               np.maximum(self.Rho_bounds[1], bounds[2][1]))\n            self.Theta_bounds = (np.minimum(self.Theta_bounds[0], bounds[3][0]),\n                                 np.maximum(self.Theta_bounds[1], bounds[3][1]))\n    def evaluate_bounds(self):\n        for Curve in self.Curves:\n            bounds = self.evaluate_curve_bounds(Curve)\n            self.update_curve_bounds(bounds)\n    def add_curve(self, curve, plot_type, bounds=None, evaluate_bounds=False):\n        self.Curves.append(curve)\n        self.PlotType.append(plot_type)\n        if bounds:\n            self.update_curve_bounds(bounds)\n        elif evaluate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n    def add_image(self, image):\n        self.Images.append(image)\n    def append_figure(self, figure: \"Figure\"):\n        self.Curves.extend(figure.Curves)\n        self.PlotType.extend(figure.PlotType)\n        self.update_curve_bounds((figure.X_bounds, figure.Y_bounds, figure.Rho_bounds, figure.Theta_bounds))\n    def __iadd__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            self.append_figure(figure)\n        else:\n            raise TypeError(\"Operator += can only be used with instance of class Figure\")\n        return self\n    def __add__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += self\n        new_figure += figure\n        return new_figure\n    def __radd__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += figure\n        new_figure += self\n        return new_figure\n    def __sub__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += self\n        new_figure -= figure\n        return new_figure\n    def __rsub__(self, figure: \"Figure\"):\n        new_figure = Figure()\n        new_figure += figure\n        new_figure -= self\n        return new_figure\n    def __isub__(self, figure: \"Figure\"):\n        if isinstance(figure, Figure):\n            for i in range(len(figure.Curves)):\n                for j in range(len(self.Curves)):\n                    if np\n        else:\n            raise TypeError(\"Operator + can only be used with instance of class Figure\")\n        return new_figure\n    def plot(self, ax, image_outline_width=1.0):\n        for image in self.Images:\n            image.plot(ax, self.z_order, image_outline_width)\n            Figure.z_order += 1\n        for i in range(len(self.Curves)):\n            if self.PlotType[i] == \"clear\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n            elif self.PlotType[i] == \"fill\":\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", zorder=self.z_order)\n            elif self.PlotType[i] > 0:\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n            elif self.PlotType[i] < 0:\n                ax.fill(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"w\", zorder=self.z_order)\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder=self.z_order)\n        Figure.z_order += 1",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        path = Path(curve)\n        return sliced_image, extent, path\n    @staticmethod\n    def ring_arc(image, dpu=1000.0, inner_radius=0.0, outer_radius=1.0, theta1=0.0, theta2=np.pi / 6) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.circular_arc(100, inner_radius, theta1, theta2)\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class CodeSegmentExtractor:\n    @staticmethod\n    def extract_middle_sections(block: str, middle_line_count: int = 1, max_characters: int = 100, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract middle sections with character limit and surrounding context.\"\"\"\n        lines = block.splitlines()\n        num_lines = len(lines)\n        if num_lines < min_context_lines + middle_line_count + max_context_lines:\n            return []\n        examples = []\n        for middle_start in range(min_context_lines, num_lines - min_context_lines - middle_line_count):\n            middle_end = middle_start + middle_line_count\n            start_prefix = max(0, middle_start - (max_context_lines if max_context_lines >= 0 else middle_start))\n            end_suffix = min(num_lines, middle_end + (max_context_lines if max_context_lines >= 0 else num_lines))\n            indentation, middle_text = TextUtils.split_indentation('\\n'.join(lines[middle_start:middle_end]))\n            prefix = '\\n'.join(lines[start_prefix:middle_start]) + '\\n' + indentation\n            suffix = '\\n' + '\\n'.join(lines[middle_end:end_suffix])\n            examples.append((prefix, middle_text, suffix))\n        return examples\n    @staticmethod\n    def extract_function_arguments(block: str, max_arguments: int = 5, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract function arguments with specified context and argument count limitations.\"\"\"\n        function_calls = find_function_calls_with_args(block)\n        lines = block.splitlines()\n        num_lines = len(lines)\n        examples = []\n        for call in function_calls:\n            if len(call['arguments']) > max_arguments > 0:\n                continue\n            if call['start_line'] - 1 < min_context_lines or num_lines - call['end_line'] < min_context_lines:\n                continue\n            prefix, middle, suffix = TextUtils.extract_function_call_details(lines, call)\n            if not middle:\n                continue\n            start = max(0, call['start_line'] - 1 - (max_context_lines if max_context_lines >= 0 else call['start_line'] - 1))\n            end = min(num_lines, call['end_line'] + (max_context_lines if max_context_lines >= 0 else num_lines))\n            prefix = '\\n'.join(lines[start:call['start_line'] - 1] + [prefix])\n            suffix = '\\n'.join([suffix] + lines[call['end_line']:end])\n            examples.append((prefix, middle, suffix))\n        return examples\n    @staticmethod\n    def extract_section(lines: List[str], start_pos: (int, int), end_pos: (int, int), max_characters: int = -1,\n                        min_context_lines: int = 1, max_context_lines: int = -1) -> Tuple[str, str, str]:\n        num_lines = len(lines)\n        start_line, start_idx = start_pos[0] - 1, start_pos[1]\n        end_line, end_idx = end_pos[0] - 1, end_pos[1]\n        if start_line < min_context_lines or num_lines - end_line - 1 < min_context_lines:\n            return None\n        middle_text = (\n            lines[start_line][start_idx:end_idx] if start_line == end_line\n            else '\\n'.join(\n                [lines[start_line][start_idx:]] + lines[start_line + 1:end_line] + [lines[end_line][:end_idx]]\n            )\n        )\n        if 0 < max_characters < len(middle_text):\n            return None\n        start = max(0, start_line - (max_context_lines if max_context_lines >= 0 else start_line))\n        end = min(num_lines, end_line + 1 + (max_context_lines if max_context_lines >= 0 else num_lines))\n        prefix = '\\n'.join(lines[start:start_line] + [lines[start_line][:start_idx]])\n        suffix = '\\n'.join([lines[end_line][end_idx:]] + lines[end_line + 1:end])\n        return prefix, middle_text, suffix\n    @staticmethod\n    def extract_assignment_sections(block: str, max_characters: int = 100, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract assignment sections with character limit and surrounding context.\"\"\"\n        assignments = find_assignments(block)\n        lines = block.splitlines()\n        examples = []\n        for start_pos, end_pos in assignments:\n            result = CodeSegmentExtractor.extract_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)\n            if result:\n                examples.append(result)\n        return examples\n    @staticmethod\n    def extract_condition_sections(block: str, max_characters: int = 100, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract condition sections with character limit and surrounding context.\"\"\"\n        conditions = find_conditions(block)\n        lines = block.splitlines()\n        examples = []\n        for start_pos, end_pos in conditions:\n            result = CodeSegmentExtractor.extract_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)\n            if result:\n                examples.append(result)\n        return examples",
    "class CodeSegmentExtractor:\n    @staticmethod\n    def extract_lines(block: str, middle_line_count: int = 1, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Generate examples by extracting specified middle lines with configurable context lines.\"\"\"\n        lines = block.splitlines()\n        num_lines = len(lines)\n        if num_lines < 2 * min_context_lines + middle_line_count:\n            return []\n        examples = []\n        for middle_start in range(min_context_lines, num_lines - min_context_lines - middle_line_count):\n            middle_end = middle_start + middle_line_count\n            start_prefix = max(0, middle_start - (max_context_lines if max_context_lines >= 0 else middle_start))\n            end_suffix = min(num_lines, middle_end + (max_context_lines if max_context_lines >= 0 else num_lines))\n            indentation, middle_text = TextUtils.split_indentation('\\n'.join(lines[middle_start:middle_end]))\n            prefix = '\\n'.join(lines[start_prefix:middle_start]) + '\\n' + indentation\n            suffix = '\\n' + '\\n'.join(lines[middle_end:end_suffix])\n            examples.append((prefix, middle_text, suffix))\n        return examples\n    @staticmethod\n    def extract_function_arguments(block: str, max_arguments: int = 5, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract function arguments with specified context and argument count limitations.\"\"\"\n        function_calls = find_function_calls_with_args(block)\n        lines = block.splitlines()\n        num_lines = len(lines)\n        examples = []\n        for call in function_calls:\n            if len(call['arguments']) > max_arguments > 0:\n                continue\n            if call['start_line'] - 1 < min_context_lines or num_lines - call['end_line'] < min_context_lines:\n                continue\n            prefix, middle, suffix = TextUtils.extract_function_call_details(lines, call)\n            if not middle:\n                continue\n            start = max(0, call['start_line'] - 1 - (max_context_lines if max_context_lines >= 0 else call['start_line'] - 1))\n            end = min(num_lines, call['end_line'] + (max_context_lines if max_context_lines >= 0 else num_lines))\n            prefix = '\\n'.join(lines[start:call['start_line'] - 1] + [prefix])\n            suffix = '\\n'.join([suffix] + lines[call['end_line']:end])\n            examples.append((prefix, middle, suffix))\n        return examples\n    @staticmethod\n    def extract_section(lines: List[str], start_pos: (int, int), end_pos: (int, int), max_characters: int = -1,\n                        min_context_lines: int = 1, max_context_lines: int = -1) -> Tuple[str, str, str]:\n        num_lines = len(lines)\n        start_line, start_idx = start_pos[0] - 1, start_pos[1]\n        end_line, end_idx = end_pos[0] - 1, end_pos[1]\n        if start_line < min_context_lines or num_lines - end_line - 1 < min_context_lines:\n            return None\n        middle_text = (\n            lines[start_line][start_idx:end_idx] if start_line == end_line\n            else '\\n'.join(\n                [lines[start_line][start_idx:]] + lines[start_line + 1:end_line] + [lines[end_line][:end_idx]]\n            )\n        )\n        if 0 < max_characters < len(middle_text):\n            return None\n        start = max(0, start_line - (max_context_lines if max_context_lines >= 0 else start_line))\n        end = min(num_lines, end_line + 1 + (max_context_lines if max_context_lines >= 0 else num_lines))\n        prefix = '\\n'.join(lines[start:start_line] + [lines[start_line][:start_idx]])\n        suffix = '\\n'.join([lines[end_line][end_idx:]] + lines[end_line + 1:end])\n        return prefix, middle_text, suffix\n    @staticmethod\n    def extract_assignment_sections(block: str, max_characters: int = 100, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract assignment sections with character limit and surrounding context.\"\"\"\n        assignments = find_assignments(block)\n        lines = block.splitlines()\n        examples = []\n        for start_pos, end_pos in assignments:\n            result = CodeSegmentExtractor.extract_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)\n            if result:\n                examples.append(result)\n        return examples\n    @staticmethod\n    def extract_condition_sections(block: str, max_characters: int = 100, min_context_lines: int = 1, max_context_lines: int = -1) -> List[Tuple[str, str, str]]:\n        \"\"\"Extract condition sections with character limit and surrounding context.\"\"\"\n        conditions = find_conditions(block)\n        lines = block.splitlines()\n        examples = []\n        for start_pos, end_pos in conditions:\n            result = CodeSegmentExtractor.extract_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)\n            if result:\n                examples.append(result)\n        return examples",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate(curve: np.ndarray, samples=100, kind=\"cubic\", inplace=True) -> np.ndarray:\n        spline = interp1d(np.linspace(0, 1, curve.shape[0]), curve.T, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        interpolated_curve = np.vstack((x_fine, y_fine)).T\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class AssignmentVisitor(ast.NodeVisitor):\n    def __init__(self):\n        self.assignments = []\n    def visit_Assign(self, node):\n        self.collect_assignment_info(node)\n        self.generic_visit(node)\n    def visit_AugAssign(self, node):\n        self.collect_assignment_info(node)\n        self.generic_visit(node)\n    def visit_AnnAssign(self, node):\n        self.collect_assignment_info(node)\n        self.generic_visit(node)\n    def collect_assignment_info(self, node):\n        if isinstance(node, ast.Assign):\n            targets = node.targets\n            value = node.value\n        elif isinstance(node, ast.AugAssign):\n            targets = [node.target]\n            value = node.value\n        elif isinstance(node, ast.AnnAssign):\n            targets = [node.target]\n            value = node.value\n        else:\n            return\n        start_line = node.lineno\n        end_line = node.end_lineno\n        end_col = node.end_col_offset\n        start_col = value.col_offset if hasattr(value, 'col_offset') else 0\n        for target in targets:\n            assignment_info = {\n                'start_line': start_line,\n                'start_col': start_col,\n                'end_line': end_line,\n                'end_col': end_col,\n            }\n            self.assignments.append(assignment_info)",
    "class TextUtils:\n    @staticmethod\n    def split_indentation(line: str) -> Tuple[str, str]:\n        \"\"\"Separate leading whitespace (indentation) from the rest of the line.\"\"\"\n        indentation_length = len(line) - len(line.lstrip())\n        indentation = line[:indentation_length]\n        code_text = line[indentation_length:]\n        return indentation, code_text\n    @staticmethod\n    def extract_function_call_details(lines: List[str], function_call: dict) -> Tuple[str, str, str]:\n        \"\"\"Extract the components of a function call: prefix, arguments, and suffix.\"\"\"\n        current_line, start_idx, end_idx = (\n            function_call['end_line'] - 1,\n            function_call['end_col_offset'] - 2,\n            function_call['end_col_offset'] - 1,\n        )\n        parentheses_balance = 1\n        while parentheses_balance:\n            char = lines[current_line][start_idx]\n            parentheses_balance += 1 if char == ')' else -1 if char == '(' else 0\n            start_idx -= 1\n            if start_idx < 0:\n                current_line -= 1\n                start_idx = len(lines[current_line]) - 1\n        prefix = '\\n'.join(lines[function_call['start_line'] - 1:current_line] + [lines[current_line][:start_idx + 2]])\n        arguments = ', '.join(function_call['arguments'])\n        suffix = lines[function_call['end_line'] - 1][end_idx:]\n        return prefix, arguments, suffix\n    @staticmethod\n    def random_split_middle_examples(examples: List[Tuple[str, str, str]], min_left: int = 5, min_right: int = 5) -> List[Tuple[str, str, str]]:\n        \"\"\"Randomly split the middle section of examples with specific constraints.\"\"\"\n        new_examples = []\n        for example in examples:\n            prefix, middle, suffix = example\n            if len(middle) < min_left + min_right:\n                continue\n            split_idx = random.randint(min_left, len(middle) - min_right)\n            prefix = prefix + middle[:split_idx]\n            middle = middle[split_idx:]\n            new_examples.append((prefix, middle, suffix))\n        return new_examples",
    "class CurveGenerator:\n    @staticmethod\n    def bezier(control_points, values=np.linspace(0.0, 1.0, 100), polar=False):\n        nodes = control_points\n        if polar:\n            nodes = CurveTransforms.polar_to_cartesian(control_points)\n        nodes = np.asfortranarray(nodes)\n        bezier_curve = bezier.Curve(nodes.T, degree=nodes.shape[0] - 1)\n        return bezier_curve.evaluate_multi(values).T\n    @staticmethod\n    def math_function(function, values, input_coordinate=\"x_input\", polar=False):\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function(x) for x in x_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"y_input\":\n            y_values = values\n            x_values = np.array([function(y) for y in y_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"parametric\":\n            result = [function(value) for value in values]\n            curve = np.array(result)\n        else:\n            print(\"Invalid input_coordinate, curve will default to 0,0\")\n            curve = np.array([[0.0, 0.0]])\n        if polar:\n            curve = CurveTransforms.polar_to_cartesian(curve)\n        return curve\n    @staticmethod\n    def regular_polygon(n, radius=1.0, offset=(0.0, 0.0)):\n        theta = np.linspace(0, 2 * np.pi, n + 1)\n        rho = radius * np.ones(n + 1)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def edge_type1(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        curve_nodes = np.array([[0.2*width, 0], [0.4*width, height], [0.6*width, height], [0.8*width, 0]])\n        curve = CurveGenerator.bezier(curve_nodes, np.linspace(0, 1 - 0.5 * half, 100))\n        if half:\n            return CurveTransforms.merge_curves([triangle1, curve])\n        return CurveTransforms.merge_curves([triangle1, curve, triangle2])\n    @staticmethod\n    def random_edge(grid_size=(1,1), grid_step=(0.1, 0.1), interpolation_type=\"bezier\"):\n        control_nodes = []\n        for i in range(grid_size[0] + 1):\n            control_nodes.append([i * grid_step[0], np.random.randint(0, grid_size[1] + 1) * grid_step[1]])\n        control_nodes = np.array(control_nodes)\n        if interpolation_type == \"bezier\":\n            curve = CurveGenerator.bezier(control_nodes)\n        elif interpolation_type == \"linear\":\n            curve = control_nodes\n        else:\n            curve = CurveTransforms.interpolate(control_nodes, 100, \"cubic\", False)\n        return curve\n    @staticmethod\n    def polyline(x_values, y_values):\n        return np.vstack((np.array(x_values), np.array(y_values))).T\n    @staticmethod\n    def circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi / 2, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        rho = radius * np.ones(n)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def sine_wave_circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi/2, amplitude=0.1, n_periods=2, period_offset=0.25, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        period = (theta2 - theta1)/n_periods\n        freq = 2*np.pi/period\n        rho = radius + amplitude*np.sin((theta-theta1+period_offset*period)*freq)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def petal(n=100, width=0.1, height=0.2, flat_stop_height=0.1, half=True):\n        arc = CurveGenerator.circular_arc(n, width / 2, 0, np.pi, (0, flat_stop_height))\n        CurveTransforms.scale_single(arc, (1, 2 * (height - flat_stop_height) / width), (0, flat_stop_height))\n    @staticmethod\n    def leaf(values=np.linspace(0, 1, 100), width=0.1, height=0.2, half=False):\n        control_nodes = np.array([[0, 0], [0, 1], [-1, 1], [-1, 2], [0, 2], [0, 3]])\n        curve = CurveGenerator.bezier(control_nodes, values)\n        curve = CurveTransforms.fit_c2c(curve, (-width/2, 0, 0, height))\n        if not half:\n            curve = np.vstack((curve, np.flip(CurveTransforms.scale_single(curve, (-1, 1), inplace=False), 0)))\n        return curve\n    @staticmethod\n    def pit(n=100, width=0.8, gap=0.2, repetitions=1):\n        start = -(width+gap)/2\n        arc_start = -width/2\n        end = -start\n        arc_end = -arc_start\n        gap1 = np.linspace(start, arc_start, 10)\n        gap2 = np.linspace(arc_end, end, 10)\n        gap1 = np.vstack((gap1, np.zeros(10))).T\n        gap2 = np.vstack((gap2, np.zeros(10))).T\n        arc = CurveGenerator.circular_arc(n, width/2, 0, np.pi)\n        CurveTransforms.scale_single(arc, (-1, -1))\n        curve = CurveTransforms.merge_curves([gap1, arc, gap2])\n        curves = []\n        for i in range(repetitions):\n            curves.append(CurveTransforms.translate_single(curve, i*(width+gap), 0, False))\n        return CurveTransforms.merge_curves(curves)",
    "class Transformer:\n    @staticmethod\n    def rotate_curves(curves: \"list\", angle=0):\n        transform = Affine2D().rotate(angle)\n        for i in range(len(curves)):\n            curves[i] = transform.transform(curves[i])\n    @staticmethod\n    def rotate_figure(figure: \"Figure\", angle=0):\n        Transformer.rotate_curves(figure.Curves, angle)\n        figure.evaluate_bounds()\n        return figure\n    @staticmethod\n    def scale_curves(curves: \"list\", scale=1.0):\n        for i in range(len(curves)):\n            curves[i] = scale*curves[i]\n    @staticmethod\n    def scale_figure(figure: \"Figure\", scale=1.0):\n        Transformer.scale_curves(figure.Curves, scale)\n        figure.evaluate_bounds()\n    @staticmethod\n    def rotation_repeat_curves(curves: \"list\", number_of_segments=None, delta_angle=None, scale=1.0, reverse_rotation=False):\n        if number_of_segments is None and delta_angle is None:\n            repetitions = 1\n            angle = None\n        elif number_of_segments is None:\n            repetitions = np.trunc(2*np.pi/delta_angle)\n            angle = None\n        elif delta_angle is None:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = None\n        else:\n            repetitions = np.maximum(1, number_of_segments)\n            angle = delta_angle\n        if angle is None:\n            angle = 2*np.pi/repetitions\n        if reverse_rotation:\n            angle = -angle\n        scale = np.array(scale)\n        if scale.size == 1:\n            scales = scale*np.ones(repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == repetitions:\n            scales = scale\n        else:\n            scales = np.ones(repetitions)\n        base_curves = copy.deepcopy(curves)\n        Transformer.scale_curves(curves, scales[0])\n        for i in range(1, repetitions):\n            new_curves = copy.deepcopy(base_curves)\n            Transformer.rotate_curves(new_curves, i*angle)\n            Transformer.scale_curves(new_curves, scales[i])\n            curves.extend(new_curves)\n    @staticmethod\n    def rotation_repeat_figure(figure: \"Figure\", number_of_segments=None, delta_angle=None, scale=1.0):\n        Transformer.rotation_repeat_curves(figure.Curves)\n        figure.evaluate_bounds()\n    @staticmethod\n    def flip_horizontal(curves):\n        for i in range(len(curves)):\n            curves[i][0, :] = -curves[i][0, :]\n    @staticmethod\n    def flip_vertical(curves):\n        for i in range(len(curves)):\n            curves[i][1, :] = -curves[i][1, :]\n    @staticmethod\n    def translate_curves(curves: \"list\", x=0.0, y=0.0):\n        for i in range(len(curves)):\n            curves[i][0, :] += x\n            curves[i][1, :] += y\n    @staticmethod\n    def translation_repeat_curves(curves: \"list\", repetitions=(2, 2), step=(0.1, 0.1), scale=1.0):\n        x_repetitions = np.maximum(repetitions[0], 1)\n        y_repetitions = np.maximum(repetitions[1], 1)\n        base_curves = copy.deepcopy(curves)\n        for x in range(1, x_repetitions):\n            Transformer.translate_curves(base_curves, step[0], 0)\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n        base_curves = copy.deepcopy(curves)\n        for y in range(1, y_repetitions):\n            Transformer.translate_curves(base_curves, 0, step[1])\n            new_curves = copy.deepcopy(base_curves)\n            curves.extend(new_curves)\n    @staticmethod\n    def translation_repeat_figure(figure: \"Figure\", repetitions=(2, 2), step=(0.1, 0.1)):\n        Transformer.translation_repeat_curves(figure.Curves, repetitions, step)\n        figure.evaluate_bounds()\n    @staticmethod\n    def remove_curves(curves: \"list\", indices=None):\n        if indices is None:\n            indices = np.arange(len(curves))\n        for i in np.sort(indices)[::-1]:\n            del curves[i]\n    @staticmethod\n    def remove_figure(figure: \"Figure\", indices=None):\n        Transformer.remove_curves(figure.Curves, indices)\n        figure.evaluate_bounds()\n    @staticmethod\n    def remove_curve(curve):\n        curves.clear()\n        curves.append(curve)\n    @staticmethod\n    def reverse_curve(curve):\n        curve[:] = np.flip(curve, 1)\n    @staticmethod\n    def reverse_curves(curves: \"list\"):\n        for i in range(len(curves)):\n            Transformer.reverse_curve(curves[i])\n    @staticmethod\n    def interpolate_curve(curve, samples=100, kind=\"cubic\"):\n        spline = interp1d(np.linspace(0, 1, curve.shape[1]), curve, kind=kind)\n        t_fine = np.linspace(0, 1, samples)\n        x_fine, y_fine = spline(t_fine)\n        curve.resize((2, samples), refcheck=False)\n        curve[:] = np.vstack((x_fine, y_fine))\n    def transform_figure(self, figure: \"Figure\"):\n        return",
    "class ImageSample:\n    outline_colors = [plt.get_cmap(\"tab20\")(i/20) for i in range(20)]\n    random.shuffle(outline_colors)\n    current_outline = 0\n    def __init__(self, image, extent, main_clip_path, local_outline_curves: List[np.ndarray] = None):\n        self.Image = image\n        self.Extent = extent\n        self.MainClipPath = main_clip_path\n        self.PersistentClipPaths = [main_clip_path]\n        self.PersistentTransforms = [Affine2D()]\n        self.AdditiveTransforms = []\n        if local_outline_curves:\n            self.LocalOutlineCurves = local_outline_curves\n        else:\n            self.LocalOutlineCurves = []\n        self.AdditionalCurves = []\n    def clear_additive_transforms(self):\n        self.AdditiveTransforms = []\n    def add_additive_transform(self, transform):\n        self.AdditiveTransforms.append(transform)\n    def add_additive_transforms(self, transforms):\n        self.AdditiveTransforms.extend(transforms)\n    def add_additional_curve(self, curve):\n        self.AdditionalCurves.append(curve)\n    def add_additional_curves(self, curves):\n        self.AdditionalCurves.extend(curves)\n    def update_image(self, image):\n        self.Image = image\n    def add_persistent_clip_path(self, clip_path, transform):\n        self.PersistentClipPaths.append(clip_path)\n        self.PersistentTransforms.append(transform)\n    def add_local_outline_curve(self, curve):\n        self.LocalOutlineCurves.append(curve)\n    def plot_persistent(self, ax: \"Axes\", transform, z_order, outline_thickness=0.5, debug_colors=False):\n        if debug_colors:\n            outline_color = ImageSample.outline_colors[ImageSample.current_outline]\n        else:\n            outline_color = [0.0, 0.0, 0.0]\n        for i in range(len(self.PersistentClipPaths)):\n            im = ax.imshow(self.Image, extent=self.Extent, origin=\"upper\", cmap=\"gray\", clip_on=True, interpolation=\"bicubic\",\n                           zorder=z_order, transform=self.PersistentTransforms[i] + transform + ax.transData)\n            im.set_clip_path(self.PersistentClipPaths[i], self.PersistentTransforms[i] + transform + ax.transData)\n            for curve in self.LocalOutlineCurves:\n                ax.plot(curve[:, 0], curve[:, 1], color=outline_color, solid_capstyle='round', transform=self.PersistentTransforms[i] + transform + ax.transData, zorder=z_order, linewidth=outline_thickness)\n    def plot(self, ax: \"Axes\", z_order=1, outline_thickness=0.5, debug_colors=False):\n        z_order += 0.001\n        for curve in self.AdditionalCurves:\n            ax.plot(curve[:, 0], curve[:, 1], color=\"k\", solid_capstyle='round', zorder=z_order, transform=ax.transData, linewidth=outline_thickness)\n        if len(self.AdditiveTransforms) == 0:\n            self.plot_persistent(ax, Affine2D(), z_order, outline_thickness, debug_colors)\n        else:\n            for transform in self.AdditiveTransforms:\n                self.plot_persistent(ax, transform, z_order, outline_thickness, debug_colors)\n                z_order += 0.001\n        ImageSample.current_outline = (ImageSample.current_outline+1) % 20",
    "class CurveGenerator:\n    @staticmethod\n    def bezier(control_points, values=np.linspace(0.0, 1.0, 100), polar=False):\n        nodes = control_points\n        if polar:\n            nodes = CurveTransforms.polar_to_cartesian(control_points)\n        nodes = np.asfortranarray(nodes)\n        bezier_curve = bezier.Curve(nodes.T, degree=nodes.shape[0] - 1)\n        return bezier_curve.evaluate_multi(values).T\n    @staticmethod\n    def math_function(function, values, input_coordinate=\"x_input\", polar=False):\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function(x) for x in x_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"y_input\":\n            y_values = values\n            x_values = np.array([function(y) for y in y_values])\n            curve = np.vstack((x_values, y_values)).T\n        elif input_coordinate == \"parametric\":\n            result = [function(value) for value in values]\n            curve = np.array(result)\n        else:\n            print(\"Invalid input_coordinate, curve will default to 0,0\")\n            curve = np.array([[0.0, 0.0]])\n        if polar:\n            curve = CurveTransforms.polar_to_cartesian(curve)\n        return curve\n    @staticmethod\n    def regular_polygon(n, radius=1.0, offset=(0.0, 0.0)):\n        theta = np.linspace(0, 2 * np.pi, n + 1)\n        rho = radius * np.ones(n + 1)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def edge_type1(width=1.0, height=0.2, flip=False, half=False):\n        if flip:\n            height = -height\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width, height], [width, 0]])\n        curve_nodes = np.array([[0.2*width, 0], [0.4*width, height], [0.6*width, height], [0.8*width, 0]])\n        curve = CurveGenerator.bezier(curve_nodes, np.linspace(0, 1 - 0.5 * half, 100))\n        if half:\n            return CurveTransforms.merge_curves([triangle1, curve])\n        return CurveTransforms.merge_curves([triangle1, curve, triangle2])\n    @staticmethod\n    def random_edge(grid_size=(1,1), grid_step=(0.1, 0.1), interpolation_type=\"bezier\"):\n        control_nodes = []\n        for i in range(grid_size[0] + 1):\n            control_nodes.append([i * grid_step[0], np.random.randint(0, grid_size[1] + 1) * grid_step[1]])\n        control_nodes = np.array(control_nodes)\n        if interpolation_type == \"bezier\":\n            curve = CurveGenerator.bezier(control_nodes)\n        elif interpolation_type == \"linear\":\n            curve = control_nodes\n        else:\n            curve = CurveTransforms.interpolate(control_nodes, 100, \"cubic\", False)\n        return curve\n    @staticmethod\n    def polyline(x_values, y_values):\n        curve = np.vstack((x_values, y_values)).T\n        return curve\n    @staticmethod\n    def circular_arc(n=100, radius=1.0, theta1=0.0, theta2=np.pi, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        rho = radius * np.ones(n)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def sine_wave_circular_arc(n=100, radius=0.5, theta1=0.0, theta2=np.pi/2, amplitude=0.1, n_periods=2, period_offset=0.25, offset=(0.0, 0.0)):\n        theta = np.linspace(theta1, theta2, n)\n        period = (theta2 - theta1)/n_periods\n        freq = 2*np.pi/period\n        rho = radius + amplitude*np.sin((theta-theta1+period_offset*period)*freq)\n        curve = CurveTransforms.polar_to_cartesian(np.vstack((rho, theta)).T)\n        CurveTransforms.translate_single(curve, offset[0], offset[1], inplace=True)\n        return curve\n    @staticmethod\n    def petal(n=100, width=0.1, height=0.2, flat_stop_height=0.1, half=True):\n        arc = CurveGenerator.circular_arc(n, width / 2, 0, np.pi, (0, flat_stop_height))\n        CurveTransforms.scale_single(arc, (1, 2 * (height - flat_stop_height) / width), (0, flat_stop_height))\n    @staticmethod\n    def leaf(values=np.linspace(0, 1, 100), width=0.1, height=0.2, half=False):\n        control_nodes = np.array([[0, 0], [0, 1], [-1, 1], [-1, 2], [0, 2], [0, 3]])\n        curve = CurveGenerator.bezier(control_nodes, values)\n        curve = CurveTransforms.fit_c2c(curve, (-width/2, 0, 0, height))\n        if not half:\n            curve = np.vstack((curve, np.flip(CurveTransforms.scale_single(curve, (-1, 1), inplace=False), 0)))\n        return curve\n    @staticmethod\n    def pit(n=100, width=0.8, gap=0.2, repetitions=1):\n        start = -(width+gap)/2\n        arc_start = -width/2\n        end = -start\n        arc_end = -arc_start\n        gap1 = np.linspace(start, arc_start, 10)\n        gap2 = np.linspace(arc_end, end, 10)\n        gap1 = np.vstack((gap1, np.zeros(10))).T\n        gap2 = np.vstack((gap2, np.zeros(10))).T\n        arc = CurveGenerator.circular_arc(n, width/2, 0, np.pi)\n        CurveTransforms.scale_single(arc, (-1, -1))\n        curve = CurveTransforms.merge_curves([gap1, arc, gap2])\n        curves = []\n        for i in range(repetitions):\n            curves.append(CurveTransforms.translate_single(curve, i*(width+gap), 0, False))\n        return CurveTransforms.merge_curves(curves)",
    "class ImageSlicer:\n    @staticmethod\n    def sample_from_curve(image, curve, dpu=1000.0):\n        height = image.shape[0]\n        width = image.shape[1]\n        image_ar = width / height\n        x1 = np.min(curve[:, 0])\n        x2 = np.max(curve[:, 0])\n        y1 = np.min(curve[:, 1])\n        y2 = np.max(curve[:, 1])\n        extent = (x1, x2, y1, y2)\n        x_abs = x2 - x1\n        y_abs = y2 - y1\n        clip_ar = x_abs / y_abs\n        if clip_ar < image_ar:\n            new_height = np.minimum(int(np.minimum(height, y_abs*dpu)), height-1)\n            new_width = int(new_height * clip_ar)\n        else:\n            new_width = np.minimum(int(np.minimum(width, x_abs*dpu)), width-1)\n            new_height = int(new_width / clip_ar)\n        origin = (np.random.randint(0, width - new_width), np.random.randint(0, height - new_height))\n        sliced_image = image[origin[1]:origin[1] + new_height, origin[0]:origin[0] + new_width]\n        sliced_image = cv2.resize(sliced_image, (new_width, new_height))\n        path = Path(curve - origin)\n        return sliced_image, extent, path\n    @staticmethod\n    def random_edge(grid_size=(5, 5), step_size=(1, 1), interpolation=\"spline\"):\n        grid_size = np.array(grid_size)\n        step_size = np.array(step_size)\n        grid_size = np.maximum(grid_size, 1)\n        step_size = np.maximum(step_size, 1)\n        grid_size = np.minimum(grid_size, 100)\n        step_size = np.minimum(step_size, 100)\n        grid_size = np.maximum(grid_size, 1)\n        step_size = np.maximum(step_size, 1\n        curve2 = np.flip(CurveGenerator.circular_arc(100, outer_radius, theta1, theta2), 0)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def serrated_ring_arc(image, dpu=1000.0, segments=3, aligned=True, teeth_width=0.05, inner_radius=0.0,\n                          outer_radius=1.0, theta1=0.0, theta2=np.pi / 6):\n        segments = np.maximum(1, segments)\n        theta = np.linspace(theta1, theta2, segments + 1)\n        inner_rho = np.array([inner_radius + (i % 2) * teeth_width for i in range(segments + 1)])\n        outer_rho = np.array([outer_radius - ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])\n        curve1 = np.vstack((inner_rho, theta)).T\n        curve2 = np.vstack((outer_rho, np.flip(theta))).T\n        curve1 = CurveTransforms.polar_to_cartesian(curve1)\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def sine_wave_ring_arc(image, dpu=1000.0, n_periods=2, period_offset=0.25, inner_radius=0.5, outer_radius=0.8,\n                           amplitude=0.1, theta1=0.0, theta2=np.pi/2):\n        inner_curve = CurveGenerator.sine_wave_circular_arc(100, inner_radius+amplitude, theta1, theta2, amplitude, n_periods, period_offset)\n        outer_curve = np.flip(CurveGenerator.sine_wave_circular_arc(100, outer_radius-amplitude, theta1, theta2, amplitude, n_periods, period_offset), 0)\n        outline_curves = [inner_curve, outer_curve]\n        curve = np.vstack((inner_curve, outer_curve))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_ring_arc(image, dpu=1000.0, inner_curve: (np.ndarray, int, float, float, str) = (np.array([[0.0, 0.0]]), 1, 0.5, 0.05, \"cartesian\"),\n                        outer_curve: (np.ndarray, int, float, str) = (np.array([[0.0, 0.0]]), 1, 0.8, 0.05, \"cartesian\"), theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False) -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        if inner_curve is None:\n            curve1 = np.array([[0, 0]])\n        else:\n            (curve1, periods1, radius1, width1, coordinate_type1) = inner_curve\n            if coordinate_type1 == \"polar\":\n                curve1 = CurveTransforms.tight_remap_polar_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n                curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            else:\n                curve1 = np.vstack((-curve1[:, 0], curve1[:, 1])).T\n                curve1 = CurveTransforms.tight_map_cartesian_to_polar(curve1, (radius1, radius1+width1), (theta1, theta1 + (theta2-theta1)/periods1))\n            curve1 = CurveTransforms.polar_to_cartesian(curve1)\n            curve1 = np.vstack([CurveTransforms.rotate_single(curve1, i * (theta2 - theta1) / periods1, inplace=False) for i in range(0, periods1)])\n        (curve2, periods2, radius2, width2, coordinate_type2) = outer_curve\n        if coordinate_type2 == \"polar\":\n            curve2 = CurveTransforms.tight_remap_polar_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n            curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        else:\n            curve2 = np.vstack((-curve2[:, 0], curve2[:, 1])).T\n            curve2 = CurveTransforms.tight_map_cartesian_to_polar(curve2, (radius2 - width2, radius2), (theta1, theta1 + (theta2-theta1)/periods2))\n        curve2 = CurveTransforms.polar_to_cartesian(curve2)\n        curve2 = np.flip(np.vstack([CurveTransforms.rotate_single(curve2, i*(theta2-theta1)/periods2, inplace=False) for i in range(0, periods2)]), 0)\n        if left_side and right_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif right_side:\n            outline_curves = [np.vstack((curve1, curve2))]\n        elif left_side:\n            outline_curves = [np.vstack((curve2, curve1))]\n        else:\n            outline_curves = [curve1, curve2]\n        curve = np.vstack((curve1, curve2))\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def random_ring_arc(image, dpu=2000.0, grid_size=(5, 5), step_size=(1, 1), inner_radius=0.5, outer_radius=0.8, width=0.1, theta1=0.0, theta2=np.pi/6,\n                        left_side=False, right_side=False, interpolation=\"spline\") -> (np.ndarray, (float, float, float, float), Path, List[np.ndarray]):\n        curve1 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        curve2 = CurveGenerator.random_edge(grid_size, step_size, interpolation)\n        inner_curve = (curve1, 1, inner_radius, width, \"cartesian\")\n        outer_curve = (curve2, 1, outer_radius, width, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve, theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def regular_polygon_ring_arc(image, dpu=2000.0, sides=1, inner_radius=0.5, outer_radius=0.8, theta1=0.0, theta2=np.pi/6, left_side=False, right_side=False):\n        curve = np.array((np.linspace(0, 1, sides+1), np.zeros(sides+1))).T\n        inner_curve = (curve, 1, inner_radius, 0, \"cartesian\")\n        outer_curve = (curve, 1, outer_radius, 0, \"cartesian\")\n        (image, extent, path, outline_curves) = ImageSlicer.custom_ring_arc(image, dpu, inner_curve, outer_curve,\n                                                                            theta1, theta2, left_side, right_side)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def leaf(image, dpu=1000.0, width=0.1, height=0.2, half=False):\n        curve = CurveGenerator.leaf(np.linspace(0, 1, 100), width, height, half)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def filled_center_leaf(image, dpu=1000.0, width=0.1, height=0.2,  half=True):\n        curve = CurveGenerator.leaf(np.linspace(0.5, 1, 50), width, height, half)\n        curve = np.vstack(([0, 0], curve))\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves\n    @staticmethod\n    def custom_rect_bounded(image, curve, dpu=1000.0, x_bounds=(-0.3, 0.3), y_bounds=(-0.3, 0.3), sample_rotation=0.0):\n        curve = CurveTransforms.fit_c2c(curve, x_bounds + y_bounds)\n        transform = Affine2D().rotate(sample_rotation)\n        curve = transform.transform(curve)\n        outline_curves = [curve]\n        (image, extent, path) = ImageSlicer.sample_from_curve(image, curve, dpu)\n        return image, extent, path, outline_curves",
    "class CodeCompletionEvaluator:\n    def __init__(self):\n        self.rouge = Rouge()\n    def exact_match(self, generated, expected):\n        return int(generated.strip() == expected.strip())\n    def bleu_score(self, generated, expected):\n        generated_tokens = nltk.word_tokenize(generated)\n        expected_tokens = nltk.word_tokenize(expected)\n        return sentence_bleu([expected_tokens], generated_tokens)\n    def rouge_score(self, generated, expected):\n        scores = self.rouge.get_scores(generated, expected)[0]\n        return scores['rouge-l']['f']\n    def meteor_score(self, generated, expected):\n        try:\n            generated_tokens = nltk.word_tokenize(generated)\n            expected_tokens = nltk.word_tokenize(expected)\n            return meteor_score([expected_tokens], generated_tokens)\n        except Exception as e:\n            print(f\"Error calculating METEOR score: {e}\")\n            return None\n    def syntax_validity(self, code):\n        try:\n            ast.parse(code)\n            return 1\n        except SyntaxError:\n            return 0\n    def chrf_score(self, generated, expected):\n        try:\n            return sentence_chrf(expected, generated)\n        except Exception as e:\n            print(f\"Error calculating ChrF score: {e}\")\n            return None\n    def bert_score(self, generated, expected):\n        try:\n            P, R, F1 = bert_score([generated], [expected], lang='en', rescale_with_baseline=True)\n            return F1.item()\n        except Exception as e:\n            print(f\"Error calculating BERTScore: {e}\")\n            return None\n    def evaluate(self, generated, expected, check_syntax=False):\n        results = {}\n        results['exact_match'] = self.exact_match(generated, expected)\n        results['chrf'] = self.chrf_score(generated, expected)\n        results['bleu'] = self.bleu_score(generated, expected)\n        results['rouge'] = self.rouge_score(generated, expected)\n        results['meteor'] = self.meteor_score(generated, expected)\n        results['bert'] = self.bert_score(generated, expected)\n        if check_syntax:\n            results['syntax_valid'] = self.syntax_validity(generated)\n        return results\n    def evaluate_multi(self, generated: List[str], expected: List[str], check_syntax=False):\n        length = len(generated)\n        if length != len(expected):\n            return None\n        total = defaultdict(float)\n        counts = defaultdict(int)\n        for gen, exp in zip(generated, expected):\n            for key, value in self.evaluate(gen, exp, check_syntax).items():\n                if value is not None:\n                    total[key] += value\n                    counts[key] += 1\n        averaged = {key: (total[key] / counts[key]) if counts[key] > 0 else None for key in total}\n        return averaged",
    "class AssignmentVisitor(ast.NodeVisitor):\n    def __init__(self):\n        self.assignments = []\n    def visit_Assign(self, node):\n        self.collect_assignment_info(node)\n        self.generic_visit(node)\n    def visit_AugAssign(self, node):\n        self.collect_assignment_info(node)\n        self.generic_visit(node)\n    def visit_AnnAssign(self, node):\n        self.collect_assignment_info(node)\n        self.generic_visit(node)\n    def collect_assignment_info(self, node):\n        if isinstance(node, ast.Assign):\n            targets = node.targets\n            value = node.value\n        elif isinstance(node, ast.AugAssign):\n            targets = [node.target]\n            value = node.value\n        elif isinstance(node, ast.AnnAssign):\n            targets = [node.target]\n            value = node.value\n        else:\n            return\n        start_line = node.lineno\n        end_line = node.end_lineno\n        end_col = node.end_col_offset\n        start_col = value.col_offset if hasattr(value, 'col_offset') else 0\n        for target in targets:\n            assignment_info = {\n                'start_line': start_line,\n                'start_col': start_col,\n                'end_line': end_line,\n                'end_col': end_col,\n            }\n            self.assignments.append(assignment_info)",
    "class ImageSample:\n    outline_colors = [plt.get_cmap(\"tab20\")(i/20) for i in range(20)]\n    random.shuffle(outline_colors)\n    current_outline = 0\n    def __init__(self, image, extent, main_clip_path, local_outline_curves: List[np.ndarray] = None):\n        self.Image = image\n        self.Extent = extent\n        self.MainClipPath = main_clip_path\n        self.PersistentClipPaths = [main_clip_path]\n        self.PersistentTransforms = [Affine2D()]\n        self.AdditiveTransforms = []\n        if local_outline_curves:\n            self.LocalOutlineCurves = local_outline_curves\n        else:\n            self.LocalOutlineCurves = []\n        self.AdditionalCurves = []\n    def clear_additive_transforms(self):\n        self.AdditiveTransforms = []\n    def add_additive_transform(self, transform):\n        self.AdditiveTransforms.append(transform)\n    def add_additive_transforms(self, transforms):\n        self.AdditiveTransforms.extend(transforms)\n    def add_additional_curve(self, curve):\n        self.AdditionalCurves.append(curve)\n    def add_persistent_clip_path(self, clip_path, transform):\n        self.PersistentClipPaths.append(clip_path)\n        self.PersistentTransforms.append(transform)\n    def set_main_clip_path(self, clip_path, transform):\n        self.MainClipPath = clip_path\n        self.PersistentClipPaths = [clip_path]\n        self.PersistentTransforms = [transform]\n    def set_main_clip_path_and_transform(self, clip_path, transform):\n        self.MainClipPath = clip_path\n        self.PersistentClipPaths = [clip_path]\n        self.PersistentTransforms = [transform]\n    def set_main_clip_path_and_transforms(self, clip_path, transforms):\n        self.MainClipPath = clip_path\n        self.PersistentClipPaths = [clip_path]\n        self\n    def update_extent(self, extent):\n        self.Extent = extent\n    def set_custom_outline_curves(self, outline_curves):\n        self.LocalOutlineCurves = outline_curves\n    def plot_persistent(self, ax: \"Axes\", transform, z_order, outline_thickness=0.5, debug_colors=False):\n        if debug_colors:\n            outline_color = ImageSample.outline_colors[ImageSample.current_outline]\n        else:\n            outline_color = [0.0, 0.0, 0.0]\n        for i in range(len(self.PersistentClipPaths)):\n            im = ax.imshow(self.Image, extent=self.Extent, origin=\"upper\", cmap=\"gray\", clip_on=True, interpolation=\"bicubic\",\n                           zorder=z_order, transform=self.PersistentTransforms[i] + transform + ax.transData)\n            im.set_clip_path(self.PersistentClipPaths[i], self.PersistentTransforms[i] + transform + ax.transData)\n            for curve in self.LocalOutlineCurves:\n                ax.plot(curve[:, 0], curve[:, 1], color=outline_color, solid_capstyle='round', transform=self.PersistentTransforms[i] + transform + ax.transData, zorder=z_order, linewidth=outline_thickness)\n    def plot(self, ax: \"Axes\", z_order=1, outline_thickness=0.5, debug_colors=False):\n        z_order += 0.001\n        for curve in self.AdditionalCurves:\n            ax.plot(curve[:, 0], curve[:, 1], color=\"k\", solid_capstyle='round', zorder=z_order, transform=ax.transData, linewidth=outline_thickness)\n        if len(self.AdditiveTransforms) == 0:\n            self.plot_persistent(ax, Affine2D(), z_order, outline_thickness, debug_colors)\n        else:\n            for transform in self.AdditiveTransforms:\n                self.plot_persistent(ax, transform, z_order, outline_thickness, debug_colors)\n                z_order += 0.001\n        ImageSample.current_outline = (ImageSample.current_outline+1) % 20",
    "class CurveTransforms:\n    @staticmethod\n    def apply_affine_single(curve: np.ndarray, affine: Affine2D, inplace=True) -> np.ndarray: \n        if inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            return affine.transform(curve)\n    @staticmethod\n    def apply_affine_multi(curves: List[np.ndarray], affine: Affine2D, inplace=True) -> List[np.ndarray]:\n        if inplace:\n            for i in range(len(curves)):\n                curves[i][:] = affine.transform(curves[i])\n            return curves\n        else:\n            transformed_curves = []\n            for i in range(len(curves)):\n                transformed_curves.append(affine.transform(curves[i]))\n            return transformed_curves\n    @staticmethod\n    def rotate_single(curve: np.ndarray, angle=0.0, pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def rotate_multi(curves: List[np.ndarray], angle=0.0, pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).rotate(angle).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def translate_single(curve: np.ndarray, x=0.0, y=0.0, inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def translate_multi(curves: List[np.ndarray], x=0.0, y=0.0, inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(x, y)\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def scale_single(curve: np.ndarray, scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> np.ndarray:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_single(curve, transform, inplace)\n    @staticmethod\n    def scale_multi(curves: List[np.ndarray], scale=(1.0, 1.0), pivot=(0.0, 0.0), inplace=True) -> List[np.ndarray]:\n        transform = Affine2D().translate(-pivot[0], -pivot[1]).scale(scale[0], scale[1]).translate(pivot[0], pivot[1])\n        return CurveTransforms.apply_affine_multi(curves, transform, inplace)\n    @staticmethod\n    def merge_curves(curves: List[np.ndarray]):\n        curve = np.vstack(curves)\n        return curve\n    @staticmethod\n    def polar_to_cartesian(polar_curve):\n        x = polar_curve[:, 0] * np.cos(polar_curve[:, 1])\n        y = polar_curve[:, 0] * np.sin(polar_curve[:, 1])\n        return np.vstack((x, y)).T\n    @staticmethod\n    def cartesian_to_polar(x, y):\n        rho = np.sqrt(x ** 2 + y ** 2)\n        theta = np.arctan2(y, x)\n        return np.vstack((rho, theta))\n    @staticmethod\n    def square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds):\n        if y_bounds[0] == y_bounds[1]:\n            rho = np.ones(curve_cartesian[:, 1].shape) * rho_bounds[0]\n        else:\n            rho = (curve_cartesian[:, 1] - y_bounds[0]) / (y_bounds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        if x_bounds[0] == x_bounds[1]:\n            theta = np.ones(curve_cartesian[:, 0].shape) * theta_bounds[0]\n        else:\n            theta = (curve_cartesian[:, 0] - x_bounds[0]) / (x_bounds[1] - (x_bounds[0])) * (theta_bounds[1] - theta_bounds[0]) + theta_bounds[0]\n        return np.vstack((rho, theta)).T\n    @staticmethod\n    def tight_map_cartesian_to_polar(curve_cartesian, rho_bounds, theta_bounds):\n        x_bounds = (np.min(curve_cartesian[:, 0]), np.max(curve_cartesian[:, 0]))\n        y_bounds = (np.min(curve_cartesian[:, 1]), np.max(curve_cartesian[:, 1]))\n        return CurveTransforms.square_map_cartesian_to_polar(curve_cartesian, x_bounds, y_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, new_rho_bounds, new_theta_bounds):\n        return CurveTransforms.square_map_cartesian_to_polar(curve_polar, old_theta_bounds, old_rho_bounds, new_rho_bounds, new_theta_bounds)\n    @staticmethod\n    def remap_c2c(curve, old_x_bounds, old_y_bounds, new_x_bounds, new_y_bounds):\n        transform = Affine2D().translate(-old_x_bounds[0], -old_y_bounds[0])\n        transform = transform.scale((new_x_bounds[1]-new_x_bounds[0])/(old_x_bounds[1]-old_x_bounds[0]),\n                                    (new_y_bounds[1]-new_y_bounds[0])/(old_y_bounds[1]-old_y_bounds[0]))\n        transform = transform.translate(new_x_bounds[0], new_y_bounds[0])\n        return transform.transform(curve)\n    @staticmethod\n    def fit_c2c(curve, extent):\n        x_bounds = (np.min(curve[:, 0]), np.max(curve[:, 0]))\n        y_bounds = (np.min(curve[:, 1]), np.max(curve[:, 1]))\n        return CurveTransforms.remap_c2c(curve, x_bounds, y_bounds, extent[0:2], extent[2:4])\n    @staticmethod\n    def tight_remap_polar_to_polar(curve_polar, rho_bounds, theta_bounds):\n        old_rho_bounds = (np.min(curve_polar[:, 0]), np.max(curve_polar[:, 0]))\n        old_theta_bounds = (np.min(curve_polar[:, 1]), np.max(curve_polar[:, 1]))\n        return CurveTransforms.remap_polar_to_polar(curve_polar, old_rho_bounds, old_theta_bounds, rho_bounds, theta_bounds)\n    @staticmethod\n    def interpolate_curve(curve, samples, inplace=True):\n        interpolated_curve = interpolate.interp1d(curve[:, 0], curve[:, 1], kind='cubic', axis=0, fill_value=\"extrapolate\")(np.linspace(curve[0, 0], curve[-1, 0], samples))\n        if inplace:\n            curve.resize((2, samples), refcheck=False)\n            curve[:] = interpolated_curve\n            return curve\n        else:\n            return interpolated_curve",
    "class TransformsGenerator:\n    @staticmethod\n    def rotational_repeat(repetitions: int = None, delta_angle: float = None, rotation_offset=0.0, use_flip=True, flip_angle=0.0, reverse_rotation=False):\n        if repetitions is None and delta_angle is None:\n            repetitions = 1\n            angle = None\n        elif repetitions is None:\n            repetitions = int(np.trunc(2 * np.pi / delta_angle))\n            angle = None\n        elif delta_angle is None:\n            repetitions = np.maximum(1, repetitions)\n            angle = None\n        else:\n            repetitions = np.maximum(1, repetitions)\n            angle = delta_angle\n        if angle is None:\n            angle = 2 * np.pi / repetitions\n        if reverse_rotation:\n            angle = -angle\n        transforms = []\n        for i in range(repetitions):\n            if i % 2 == 0 or not use_flip:\n                trans_data = Affine2D().rotate(rotation_offset).translate(0, 0).rotate(i * angle)\n            else:\n                trans_data = Affine2D().rotate(-flip_angle).scale(1, -1).rotate(flip_angle + rotation_offset).translate(0, 0).rotate(i * angle)\n            transforms.append(trans_data)\n        return transforms\n    @staticmethod\n    def circular_placement(radius=0.5, repetitions: int = None, delta_angle: float = None, local_rotation_offset=0.0,\n                           global_rotation_offset=0.0, use_flip=False, flip_angle=0.0, reverse_rotation=False):\n        if repetitions is None and delta_angle is None:\n            repetitions = 1\n            angle = None\n        elif repetitions is None:\n            repetitions = np.trunc(2 * np.pi / delta_angle)\n            angle = None\n        elif delta_angle is None:\n            repetitions = np.maximum(1, repetitions)\n            angle = None\n        else:\n            repetitions = np.maximum(1, repetitions)\n            angle = delta_angle\n        if angle is None:\n            angle = 2 * np.pi / repetitions\n        if reverse_rotation:\n            angle = -angle\n        transforms = []\n        for i in range(repetitions):\n            if i % 2 == 0 or not use_flip:\n                trans_data = Affine2D().rotate(local_rotation_offset).translate(radius, 0).rotate(i * angle + global_rotation_offset)\n            else:\n                trans_data = Affine2D().rotate(-flip_angle).scale(1, -1).rotate(flip_angle + local_rotation_offset).translate(radius, 0).rotate(i * angle + global_rotation_offset)\n            transforms.append(trans_data)\n        return transforms"
]