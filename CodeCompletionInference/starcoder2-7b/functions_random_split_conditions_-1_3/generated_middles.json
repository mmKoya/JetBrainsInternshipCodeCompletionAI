[
    "one and angle is None",
    "in_right or len(middle) < min_left",
    "node, ast.AugAssign)",
    "olation_type == \"linear\"",
    "ddle:\n                continue\n            if not prefix and not suffix",
    "ate_bounds:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n        else:\n            self.update_curve_bounds(self.evaluate_curve_bounds(curve))\n\n    def update_curve",
    "eTransforms)",
    "node, ast.Assign)",
    "s None",
    "yntax",
    "] == middle[-1]",
    " == 0",
    "(current, ast.Attribute)",
    "es_balance > 0:\n            char = lines[current_line][start_idx]\n            parentheses_balance += 1 if char == '(' else -1 if char == ')' else 0\n            start_idx -= 1\n        function",
    "ode.func, ast.Name)",
    "not in similarities",
    "xt_lines > 0:\n                continue\n            if call['end_line'] + 1 > max_context_lines > 0",
    "PlotType[i] == \"black\"",
    "_overlap",
    "rent, ast.Name)",
    "d right_side",
    "r",
    "unc, ast.Attribute)",
    "unds is None or self.Y_bounds is None or self.Rho_bounds is None",
    " middle_line_count + min_context_lines",
    "s None and delta_angle is None",
    "ited[j]",
    "cters < len(lines[start_line][start_idx:]):\n            start_idx += len(lines[start_line][start_idx:]) - max_characters\n        if 0 < max_characters < len(lines[",
    " len(expected)",
    "']) == 0",
    "ure, Figure)",
    "m_lines - end_line < min_context_lines",
    "ngth > 0",
    "_id == neighbour_id:\n                continue\n            if (neighbour_id, region_id) in similarities:\n                continue\n            if region_id not in similarities",
    " == region2_id",
    ", ast.If):\n            condition = ast.get_source_segment(code, node.test)\n            start_line = node.test.lineno\n            start_col = node.test.col_offset\n            end_line = node",
    "lass == np.ndarray",
    "se",
    ".size == 2",
    "gments is None and delta_angle is not None",
    "ngle is None",
    " 0:\n                trans_data = Affine2D().rotate(i * angle + rotation_offset)\n            else:\n                trans_data = Affine2D().rotate(-flip_angle).scale(1, -1).rotate",
    "[i] == \"line\":\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", zorder=self.z_order)\n            elif self",
    "type == \"bezier\"",
    "curve[0].shape[0] == 1",
    "e2 == 'polar'",
    "_colors",
    "_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve2[0, 0], curve2[0, 1]]])))]\n        elif left_side",
    "s not None",
    "e"
]