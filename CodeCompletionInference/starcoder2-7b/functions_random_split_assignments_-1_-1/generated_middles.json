[
    "age_sliced, extent, path, outline_curves)",
    "se(code, mode='exec')",
    "get_scores(generated, expected)",
    ".shape[0]",
    "ve2[:, 0], curve2[:, 1])).T",
    " y1, y2)",
    "rve[:, 0])",
    "polar_to_cartesian(x_bounds, y_bounds)",
    "* 2 + y ** 2)",
    "_curves(image, curve, dpu)",
    "ample(lines[start_pos:end_pos], max_characters, min_context_lines, max_context_lines)",
    "i / delta_angle)",
    ", sample_rotation)",
    "_line][start_idx]",
    "onditions(block)",
    "curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]",
    " outer_radius, width, \"cartesian\")",
    "ape[1]",
    "call['start_line'] - 1])\n            middle = '\\n'.join([middle] + lines[call['start_line']:call['end_line']])",
    "rtesian(rho, theta)",
    "rator.edge_type1(half=half), 1, outer_radius, edge_width, \"cartesian\")",
    ".translate(new_x_bounds[0], new_y_bounds[0])",
    "deepcopy(base_curves)\n            curves.extend(new_curves)\n        base_curves = copy.deepcopy(curves)\n        for x in range(1, x_repetitions):\n            Transformer.translate_curves(base_curves, step[0], 0)\n           ",
    "([[0.0, 0.0]])\n        if outer_curve is None:\n            curve2 = np.array([[0.0, 0.0]])",
    "curve2]",
    "ray(scale)",
    "et, global_rotation_offset, use_flip, flip_angle, reverse_rotation)",
    "lors[self.PersistentOutlineCurves[i][0]]",
    "curve1[:, 0], curve1[:, 1])).T",
    " curve2]\n        outline_curves = [CurveTransforms.rotate_single(curve, theta1, inplace=False) for curve in outline_curves]\n        outline_curves = [CurveTransforms.rotate_single(curve, theta2, inplace=False) for curve in outline_curves]",
    ") - len(line.lstrip())",
    "+ ((i + aligned) % 2) * teeth_width for i in range(segments + 1)])",
    "er(np.array([[0, 0], [0, 1], [1, 2]]))\n        elif leaf_type == \"round\":\n            leaf = CurveGenerator.bezier(np.array([[0, 0], [0, 1], [1, 1], [2, ",
    "1).rotate(local_rotation_offset).translate(radius, 0).rotate(i * angle + global_rotation_offset)",
    "om_curves(image, outline_curves, dpu)",
    "r_to_cartesian(curve)\n        return curve\n\n    @staticmethod\n    def parametric_function(function, values, input_coordinate=\"x_input\", polar=False):\n        if input_coordinate == \"x_input\":\n            x_values = values\n            y_values = np.array([function",
    "rated)",
    "source_segment(code, node.value.test)",
    "nts.shape[1], 3), dtype=np.uint8)",
    "nt(min_left, len(middle) - min_right)",
    "gion2_id]\n    regions[new_id] = {\n      'mask': np.logical_or(region1_info['mask'], region2_info['mask']),\n        'neighbors': region1_info['neighbors'].union(region2_info['neighbors']),\n        'color_histogram':",
    "te(radius, 0).rotate(i * angle + global_rotation_offset)",
    "ds[1] - (y_bounds[0])) * (rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]",
    "heta1)*n_periods",
    "rator.random_edge(grid_size, step_size, interpolation)",
    "arse(code)",
    "radius, width, \"cartesian\")",
    "itor()",
    "iamond]\n        for i in range(1, subdivisions[0]):\n            diamonds.append(Transformer.translate_curve(base_diamond, x_delta * i, 0))\n        for i in range(1, subdivisions[1]):\n            diamonds.append(",
    "p(image_sample, additive_transforms)"
]