[
    "ments(block)",
    "um(1, repetitions)",
    "x_bounds[0] - x_bounds[1]) / subdivisions[0]",
    "alue",
    "segments) + 1",
    "2 - theta1)/n_periods",
    "), 1, inner_radius, edge_width, \"cartesian\")",
    "ource_segment(self.code, node)",
    "le_from_curve(image, curve, dpu)",
    "sforms.polar_to_cartesian(curve1)",
    "rve[:, 0]), np.max(curve[:, 0]))",
    "] - 1 - (max_context_lines if max_context_lines >= 0 else call['start_line'] - 1))",
    ".transform(curve)",
    "gion_mask]",
    "ors']),\n        'color_histogram': merge_histograms(region1_info['color_histogram'],\n                                            region1_info['size'],\n                                            region2_info['color_histogram'],\n                                            region2_info['size']),\n        'size': region1_info['size'] + region2_info['size'],\n    }",
    "es, middle_end + (max_context_lines if max_context_lines >= 0 else num_lines))",
    "- 1, start_pos[1]",
    "es(examples, min_left=5, min_right=5)",
    "_pos, end_pos, max_characters, min_context_lines, max_context_lines)",
    "all['end_col_offset'] - 2,\n            function_call['end_col_offset'] - 1,\n        )",
    ", np.flip(theta))).T",
    "r_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, True)",
    "unds[1]) / subdivisions[1]",
    "ms.polar_to_cartesian(curve)",
    "on_call['arguments'])",
    "offset).translate(radius, 0).rotate(i * angle + global_rotation_offset)",
    "e(code)",
    "nd_line'] - 1][end_idx:]",
    "flip(CurveTransforms.scale_single(curve, (-1, 1), inplace=False), 0)))",
    "ne2D()]",
    "ndint(0, 255, size=(num_segments, 3), dtype=np.uint8)",
    "().rotate(-flip_angle).scale(1, -1).rotate(i * angle + flip_angle + rotation_offset)",
    "es[function_call['start_line'] - 1:current_line] + [lines[current_line][:start_idx + 2]])",
    "ple(image_sliced, extent, path, outline_curves)",
    "repetitions)",
    "ner_radius, outer_radius, width,\n                                                                                   sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge, interpolation)",
    "n_calls_with_args(block)",
    "line_curves",
    "ing_pattern, string_replacer, code, flags=re.DOTALL)",
    "rator.bezier(control_nodes, values)",
    "i % 2) * teeth_width for i in range(segments + 1)])",
    "ho), np.max(rho))",
    "rc(image, dpu, inner_curve, outer_curve, sample_rotation,\n                                                                                   sample_rotation + np.pi / segments, left_edge, right_edge)",
    "plit_idx:]",
    "_scores(generated, expected)[0]",
    "(curve[:, 0])",
    "alue",
    "len(strings)}}}}}\"",
    "lip_path",
    "image, dpu, sides_per_segment, inner_radius, outer_radius,\n                                                                                            sample_rotation, sample_rotation+np.pi/segments, left_edge, right_edge)"
]