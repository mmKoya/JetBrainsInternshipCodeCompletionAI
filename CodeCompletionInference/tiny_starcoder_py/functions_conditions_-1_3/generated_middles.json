[
    "node.targets is not None:\n            targets = node.targets\n        elif isinstance(node, ast.Assign):\n            targets = node.targets\n        elif isinstance(node, ast.AugAssign):\n            targets = node.targets\n        elif isinstance(node, ast.AugAssign):\n            targets = node.",
    "inplace:\n            curves = [curves]\n        for curve in curves:\n            curves[0] = curve.dot(affine.transform(curve[0]))\n        return curves\n\n    def apply_affine_single(curves: List[np.ndarray], affine: Affine2D, inplace=",
    "triangle1.shape[0] == 100:\n            return CurveTransforms.merge_curves([triangle1])\n        if triangle2.shape[0] == 100:\n            return CurveTransforms.merge_curves([triangle2])\n        if curve.shape[",
    "np.isscalar(repetitions) and repetitions > 0:\n            repetitions = np.maximum(1, repetitions)\n            angle = None\n        else:\n            repetitions = np.maximum(1, repetitions)\n            angle = np.pi / repetitions\n        if angle is",
    "right_side and left_side:\n            outline_curves = [np.vstack((curve1, curve2, np.array([[curve1[0, 0], curve1[0, 1]]])))]\n        elif left_side and right_side:\n            outline_cur",
    "scale.size == 1:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == 2:\n            scales = np.linspace(scale[0], scale[1], repetitions)\n        elif scale.size == 3:\n           ",
    "neighbour not in similarities:\n            similarities[(neighbour, region1_id)] = 0\n        if neighbour not in similarities:\n            similarities[(neighbour, region2_id)] = 0\n        if neighbour not in similarities:\n            similarities[(neighbour, region1",
    "neighbour not in similarities:\n            similarities[(neighbour, region1_id)] = 0\n        else",
    "repetitions == 1:\n            transforms.append(transforms[0])\n        else:\n            transforms.append(transforms[1])\n        return transforms\n\n    def _get_transforms(self, repetitions)",
    "repetitions > 1:\n            scale = scale[0:repetitions]\n        if scale.size == 1:\n            scale = scale[0]\n        if scale.size == 2:\n            scale = scale[0:2]\n        if scale.size == 3:\n           ",
    "curve.shape[0] == 0:\n            print(\"Invalid input_coordinate, curve will default to 0,0\")\n            curve = np.array([[0.0, 0.0]])\n        if curve.shape[1] == 0:\n            print(\"Invalid input_",
    "max_value is not None and max_context is not None:\n                    examples_split = examples_split[:max_value]\n                    examples_split.extend(extract_method(block, max_value, max_context))\n                datasets.append((dataset_name, examples_split))\n               ",
    "line_width > 0:\n            figure.add_line(line_width, 0)\n        if 0.0 < line_width < 1.0:\n            figure.add_line(line_width, 1)\n        if 1.0 < line_width <",
    "inplace:\n            curve[:] = affine.transform(curve)\n            return curve\n        else:\n            curve[:] = affine.transform(curve)\n            return curve\n    else:\n        if inplace",
    "number_of_segments is None:\n            repetitions = 1\n            angle = None\n        elif number_of_segments is not None and number_of_segments > 0:\n            repetitions = number_of_segments\n            angle = 0\n        elif number_of_segments is None and",
    "repetitions == 1:\n            transforms.append(transforms[0])\n        else:\n            transforms.append(transforms[1])\n        return transforms\n\n    def _get_transforms(self, repetitions)",
    "i < j",
    "repetitions is not None:\n            repetitions = np.maximum(1, repetitions)\n            angle = np.pi / repetitions\n        else:\n            repetitions = 1\n            angle = None\n\n        if angle is None:\n            angle = np.pi / 2\n\n        if repetitions is",
    "scale.size == 2",
    "isinstance(node, ast.AugAugAssign):\n            targets = [node.target]\n            value = node.value\n        elif isinstance(node, ast.AugAugAugAssign):\n            targets = [node.target]\n            value = node.value\n        elif isinstance(node, ast.AugAugAug",
    "result is not None",
    "coordinate_type1 == 'cartesian'",
    "self.AdditiveTransforms:\n            for transform in self.AdditiveTransforms",
    "additive_transforms[0] is not None:\n            (new_persistent_paths, new_persistent_transforms, outline_curves) = paths_self_overlap(image_sample.PersistentClipPaths, image_sample.PersistentTransforms,\n                                                                                                   additive_transforms[0],",
    "start_line == end_line:\n            return None\n        if start_line == 0 and end_line == 0:\n            return None\n        if start_line == 0 and end_line == num_lines - 1:\n            return None\n        if start_line == num_lines",
    "call['name'] == 'call_name'",
    "current is not None:\n                parts.insert(0, current.attr)\n                current = current.value\n            if isinstance(current, ast.Name):\n                parts.insert(0, current.id)\n                current = current.id\n            if isinstance(current, ast.Attribute):\n                parts.",
    "bounds is not None",
    "isinstance(node.func, ast.Attribute)",
    "function == \"sin\":\n            return np.sin(values)\n        elif function == \"cos\":\n            return np.cos(values)\n        elif function == \"tan\":\n            return np.tan(values)\n        elif function == \"arcsin\":\n            return np.arcsin(values)\n        elif function ==",
    "key not in counts",
    "max_context > 0:\n                        examples_split = examples_split[:max_context]\n                    if max_value > 0:\n                        examples_split = examples_split[:max_value]\n                    if max_context > 0",
    "rotation_mode == 'random':\n            rotation_mode = np.random.choice(['random', 'random_rotated'])\n        elif rotation_mode == 'random_rotated':\n            rotation_mode = np.random.choice(['random', 'random_rotated'])\n        else:\n            raise",
    "current_line == function_call['end_line'] - 1:\n                current_line += 1\n                start_idx = len(lines[current_line]) - 1\n        if parentheses_balance == 0:\n            return function_call['start_line'] - 1\n       ",
    "node.value.test.type == ast.Type.STRING:\n            condition = ast.get_source_segment(code, node.value.test)\n            start_line = node.value.test.lineno\n            start_col = node.value.test.col_offset\n            conditions.",
    "prefix == middle",
    "flip:\n            width = -width\n        triangle1 = np.array([[0, 0], [0.1*width, height], [0.2*width, 0]])\n        triangle2 = np.array([[0.8*width, 0], [0.9*width",
    "curve_cartesian.shape[0] == 1:\n            rho = rho * (rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]\n        return rho\n\n    def _get_curve_cartesian(self, x_bounds, y_bounds,",
    "neighbour_id not in similarities:\n                similarities[(region_id, neighbour_id)] = 0\n            similarities[(region_id, neighbour_id)] += region['color_histogram'][neighbour_id]\n    return similarities\n\n\ndef histogram_intersection(histogram1,",
    "polar:\n            nodes = nodes.T\n        for i in range(len(nodes)):\n            control_points[i] = nodes[i]\n        if values is not None:\n            control_points = np.array(control_points)\n            control_points = control_points.reshape(-1",
    "self.args.debug:\n            print(results)\n        return results\n\n    def evaluate(self, generated, expected)",
    "curve.shape[0] == 0:\n            curve = np.zeros((samples, 2))\n            curve[:, 0] = interpolated_curve[:, 0]\n            curve[:, 1] = interpolated_curve[:, 1]\n        else",
    "image.ndim == 3:\n            image = image.transpose(2, 0, 1)\n        if image.ndim == 4:\n            image = image.transpose(1, 2, 0)\n        if image.ndim == 5:\n            image = image.transpose(",
    "call['start_line'] - 1 < min_context_lines or num_lines - call['end_line'] < min_context_lines:\n                continue\n            start = max(0, call['start_line'] - 1 - (max_context_lines if max_context",
    "__add_to_figure(self, figure):\n            return self\n        else:\n            return figure\n\n    def __sub__(self, figure: \"Figure\"):\n        if __sub_to_figure(self, figure):\n            return self\n        else:\n            return figure\n\n    def __mul__(self,",
    "clip_ar < 1.0:\n            clip_ar = 1.0\n        if clip_ar > 1.0:\n            clip_ar = 1.0\n        if clip_ar < 0.0:\n            clip_ar = 0.0\n        if clip_",
    "rotation_offset is None:\n            rotation_offset = 0.0\n        if delta_angle is None:\n            delta_angle = 0.0\n        if use_flip is None:\n            use_flip = True\n        if flip_angle is None:\n            flip_angle =",
    "node.func.id == \"self\":\n            func_name = node.func.id\n        elif isinstance(node.func, ast.Name)",
    "current_line < len(lines) and lines[current_line][start_idx] == '(':\n            parentheses_balance += 1 if lines[current_line][start_idx] == ')' else -1 if lines[current_line][start_idx] == '(' else 0\n           ",
    "self.PlotType[i] < 0:\n                ax.plot(self.Curves[i][:, 0], self.Curves[i][:, 1], color=\"k\", solid_capstyle='round',\n                         linewidth=self.PlotType[i], zorder="
]