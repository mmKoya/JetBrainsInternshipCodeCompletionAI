[
    "age_sliced, extent, path, outline_curves)",
    "se(code)",
    "get_scores(generated, expected)[0]",
    ".shape[0]",
    "ve2[:, 0], curve2[:, 1])).T",
    " y1, y2)",
    "rve[:, 0])",
    "cartesian_to_polar(curve[0, :], curve[1, :])",
    "* 2 + y ** 2)",
    "_curve(image, curve, dpu)",
    "egmentExtractor.extract_section(lines, start_pos, end_pos, max_characters, min_context_lines, max_context_lines)",
    "i / delta_angle)",
    ", outer_radius-inner_radius, True)",
    "_line][start_idx]",
    "onditions(block)",
    "curve1, curve2))]",
    " outer_radius, width, \"cartesian\")",
    "ape[1]",
    "call['start_line'] - 1] + [prefix])",
    "rtesian(np.vstack((rho, theta)).T)",
    "rator.edge_type1(half=half), 1, outer_radius, edge_width, \"cartesian\")",
    ".translate(new_x_bounds[0], new_y_bounds[0])",
    "deepcopy(base_curves)",
    "([[0, 0]])",
    "curve2]",
    "ray(scale)",
    "et,\n                                                                     global_rotation_offset, use_flip, flip_angle, reverse_rotation)",
    "lors[ImageSample.current_outline]",
    "curve1[:, 0], curve1[:, 1])).T",
    " curve2]",
    ") - len(line.lstrip())",
    "+ (i % 2) * teeth_width for i in range(segments + 1)])",
    "er(np.array([[-1, 0], [-1, 1], [0, 1], [0, 2]]))",
    "1).rotate(flip_angle + local_rotation_offset).translate(radius, 0).rotate(i * angle + global_rotation_offset)",
    "om_curve(image, curve, dpu)",
    "r_to_cartesian(curve)",
    "rated)",
    "source_segment(code, node.value.test)",
    "nts.shape[1], 3), dtype=np.uint8)",
    "nt(min_left, min_left + (len(middle) - min_right - min_left) // 2 + 1)",
    "gion2_id]",
    "te(radius, 0).rotate(i * angle + global_rotation_offset)",
    "ds[1] - (y_bounds[0])) * (\n                        rho_bounds[1] - rho_bounds[0]) + rho_bounds[0]",
    "heta1)/n_periods",
    "rator.random_edge(grid_size, step_size, interpolation)",
    "arse(self.code)",
    "radius, width, \"cartesian\")",
    "itor(source_code)",
    "iamond]",
    "p(image_sample.PersistentClipPaths, image_sample.PersistentTransforms,\n                                                                                                   additive_transforms[0], additive_transforms[1])"
]